{
    "header": {
        "metadata": [
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///bifrost_object_i.json"
        },
        {
            "uri": "file:///ivy_surface_diagnostic_type.json"
        },
        {
            "uri": "file:///Math_types.json"
        },
        {
            "uri": "file:///Core_Array_array_is_empty.json"
        },
        {
            "uri": "file:///Math_conversion.json"
        },
        {
            "uri": "file:///bifrost_geometry_query_types.json"
        },
        {
            "uri": "file:///geometry_types.json"
        },
        {
            "uri": "file:///get_property_any.json"
        },
        {
            "uri": "file:///get_property.json"
        },
        {
            "uri": "file:///get_geo_component_count.json"
        },
        {
            "uri": "file:///get_geo_target_count.json"
        },
        {
            "uri": "file:///riv_types.json"
        },
        {
            "uri": "file:///point_types.json"
        },
        {
            "uri": "file:///FCurve.json"
        },
        {
            "uri": "file:///riv_ops.json"
        },
        {
            "uri": "file:///Math_bool.json"
        },
        {
            "uri": "file:///Math_vector4_to_vector3.json"
        },
        {
            "uri": "file:///get_geo_property_check.json"
        },
        {
            "uri": "file:///get_geo_schema_type.json"
        },
        {
            "uri": "file:///volume_types.json"
        },
        {
            "uri": "file:///volume_nodedefs.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_vector.json"
        },
        {
            "uri": "file:///has_property.json"
        },
        {
            "uri": "file:///create_volume_geo_prop.json"
        },
        {
            "uri": "file:///is_a.json"
        },
        {
            "uri": "file:///create_object_from_schema.json"
        },
        {
            "uri": "file:///is_a_mesh.json"
        },
        {
            "uri": "file:///is_a_strands.json"
        },
        {
            "uri": "file:///is_a_points.json"
        },
        {
            "uri": "file:///is_a_volume.json"
        },
        {
            "uri": "file:///switch_is_a.json"
        },
        {
            "uri": "file:///get_target_component.json"
        },
        {
            "uri": "file:///create_data_geo_prop.json"
        },
        {
            "uri": "file:///set_property_any.json"
        },
        {
            "uri": "file:///set_property.json"
        },
        {
            "uri": "file:///set_geo_property.array.json"
        },
        {
            "uri": "file:///set_geo_property.scalar.json"
        },
        {
            "uri": "file:///get_property_keys.json"
        },
        {
            "uri": "file:///is_empty.json"
        },
        {
            "uri": "file:///materials.json"
        },
        {
            "uri": "file:///standard_surface_mat.json"
        },
        {
            "uri": "file:///assign_diagnostic_material.json"
        },
        {
            "uri": "file:///erase_property.json"
        },
        {
            "uri": "file:///get_sub_object.json"
        },
        {
            "uri": "file:///get_point_count.json"
        },
        {
            "uri": "file:///CoreArrayOps.json"
        },
        {
            "uri": "file:///get_geo_property.json"
        },
        {
            "uri": "file:///get_point_position.json"
        },
        {
            "uri": "file:///set_point_position.json"
        },
        {
            "uri": "file:///Math_long.json"
        },
        {
            "uri": "file:///Math_float.json"
        },
        {
            "uri": "file:///Math_double.json"
        },
        {
            "uri": "file:///Math_char.json"
        },
        {
            "uri": "file:///Math_int.json"
        },
        {
            "uri": "file:///Math_short.json"
        },
        {
            "uri": "file:///Math_uchar.json"
        },
        {
            "uri": "file:///Math_uint.json"
        },
        {
            "uri": "file:///Math_ulong.json"
        },
        {
            "uri": "file:///Math_ushort.json"
        },
        {
            "uri": "file:///get_point_normal.json"
        },
        {
            "uri": "file:///Math_array.json"
        },
        {
            "uri": "file:///Core_Array_slice_array.json"
        },
        {
            "uri": "file:///update_mesh_normals.json"
        },
        {
            "uri": "file:///object_terminal.json"
        },
        {
            "uri": "file:///ivy_surface.json"
        },
        {
            "uri": "file:///add_points_to_points.json"
        },
        {
            "uri": "file:///validate_points.json"
        },
        {
            "uri": "file:///construct_points.json"
        },
        {
            "uri": "file:///set_point_shape.json"
        },
        {
            "uri": "file:///Math_constants.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds_impl.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds.json"
        },
        {
            "uri": "file:///increment_decrement.json"
        },
        {
            "uri": "file:///set_sub_object_property.json"
        },
        {
            "uri": "file:///validate_mesh.json"
        },
        {
            "uri": "file:///construct_mesh.json"
        },
        {
            "uri": "file:///Math_quaternion_to_matrix.json"
        },
        {
            "uri": "file:///Math_compose_transform_matrix.json"
        },
        {
            "uri": "file:///Math_vector3_to_vector4.json"
        },
        {
            "uri": "file:///Math_axis_angle_to_quaternion.json"
        },
        {
            "uri": "file:///Math_length_squared.json"
        },
        {
            "uri": "file:///Math_almost_equal.json"
        },
        {
            "uri": "file:///rotation_between_vectors.json"
        },
        {
            "uri": "file:///Math_multiply_quaternions.json"
        },
        {
            "uri": "file:///Math_rotate_by_quaternion.json"
        },
        {
            "uri": "file:///set_point_normal.json"
        },
        {
            "uri": "file:///create_mesh_sphere.json"
        },
        {
            "uri": "file:///half_of.json"
        },
        {
            "uri": "file:///ivy_seeds.json"
        },
        {
            "uri": "file:///processing_type.json"
        },
        {
            "uri": "file:///CoreStringOps.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_scalar.json"
        },
        {
            "uri": "file:///ivy_node_type.json"
        },
        {
            "uri": "file:///ivy_branch_type.json"
        },
        {
            "uri": "file:///get_ivy_solver_settings.json"
        },
        {
            "uri": "file:///merge_meshes.json"
        },
        {
            "uri": "file:///merge_points.json"
        },
        {
            "uri": "file:///merge_strands.json"
        },
        {
            "uri": "file:///merge_geometry.json"
        },
        {
            "uri": "file:///build_closest_accelerator.json"
        },
        {
            "uri": "file:///build_raycast_accelerator.json"
        },
        {
            "uri": "file:///access_offset_array.json"
        },
        {
            "uri": "file:///get_mesh_structure.json"
        },
        {
            "uri": "file:///Core_Array_flatten_nested_array.json"
        },
        {
            "uri": "file:///mesh_nodedefs.json"
        },
        {
            "uri": "file:///simulation_types.json"
        },
        {
            "uri": "file:///simulation_nodedefs.json"
        },
        {
            "uri": "file:///fluids_types.json"
        },
        {
            "uri": "file:///fluids_nodedefs.json"
        },
        {
            "uri": "file:///jotun_rand.json"
        },
        {
            "uri": "file:///random_value.json"
        },
        {
            "uri": "file:///Core_Constants_default_value.json"
        },
        {
            "uri": "file:///Math_change_range.json"
        },
        {
            "uri": "file:///one_minus.json"
        },
        {
            "uri": "file:///Core_Array_sum_array_impl.json"
        },
        {
            "uri": "file:///Core_Array_sum_array.json"
        },
        {
            "uri": "file:///sample_closest_in_radius_accelerator.json"
        },
        {
            "uri": "file:///array_average.json"
        },
        {
            "uri": "file:///sample_raycast_accelerator.json"
        },
        {
            "uri": "file:///Core_Array_all_any_array.json"
        },
        {
            "uri": "file:///sample_closest_accelerator.json"
        },
        {
            "uri": "file:///Profiler.json"
        },
        {
            "uri": "file:///object_profiler.json"
        },
        {
            "uri": "file:///resize_vector.json"
        },
        {
            "uri": "file:///distance_between_vectors.json"
        },
        {
            "uri": "file:///twice_of.json"
        },
        {
            "uri": "file:///Math_degrees_to_radians.json"
        },
        {
            "uri": "file:///set_point_length.json"
        },
        {
            "uri": "file:///instances.json"
        },
        {
            "uri": "file:///change_range.json"
        },
        {
            "uri": "file:///Core_Array_reverse_array.json"
        },
        {
            "uri": "file:///string_to_array.json"
        },
        {
            "uri": "file:///create_mesh_cube.json"
        },
        {
            "uri": "file:///randomize_selection.json"
        },
        {
            "uri": "file:///delete_points_in_points.json"
        },
        {
            "uri": "file:///delete_points.json"
        },
        {
            "uri": "file:///find_all_in_array.json"
        },
        {
            "uri": "file:///cull_points.json"
        },
        {
            "uri": "file:///create_mesh_plane.json"
        },
        {
            "uri": "file:///create_instances.json"
        },
        {
            "uri": "file:///set_point_scale.json"
        },
        {
            "uri": "file:///set_point_orientation.json"
        },
        {
            "uri": "file:///Math_matrix_to_quaternion.json"
        },
        {
            "uri": "file:///normal_and_tangent_to_orientation.json"
        },
        {
            "uri": "file:///Math_euler_to_quaternion.json"
        },
        {
            "uri": "file:///set_orientation_value.json"
        },
        {
            "uri": "file:///set_point_size.json"
        },
        {
            "uri": "file:///set_strands_shape.json"
        },
        {
            "uri": "file:///validate_strands.json"
        },
        {
            "uri": "file:///construct_strands.json"
        },
        {
            "uri": "file:///cumulative_sum_array.json"
        },
        {
            "uri": "file:///get_strands_structure.json"
        },
        {
            "uri": "file:///get_strands_end_points.json"
        },
        {
            "uri": "file:///set_strand_length.json"
        },
        {
            "uri": "file:///get_points_in_radius.json"
        },
        {
            "uri": "file:///int_filter.json"
        },
        {
            "uri": "file:///get_array_indices.json"
        },
        {
            "uri": "file:///update_point_strand_index.json"
        },
        {
            "uri": "file:///check_point_strand_index.json"
        },
        {
            "uri": "file:///update_strands_ratio.json"
        },
        {
            "uri": "file:///get_geo_property_or_default.json"
        },
        {
            "uri": "file:///simulation_types_2.json"
        },
        {
            "uri": "file:///insert_child_object.json"
        },
        {
            "uri": "file:///add_influence_property.json"
        },
        {
            "uri": "file:///influence_set_property.json"
        },
        {
            "uri": "file:///euler_to_rotation_vector.json"
        },
        {
            "uri": "file:///influence_set_spin.json"
        },
        {
            "uri": "file:///influence_fields_types.json"
        },
        {
            "uri": "file:///Core_Array_empty_array.json"
        },
        {
            "uri": "file:///set_has_animated_properties.json"
        },
        {
            "uri": "file:///remap_source_to_property_name.json"
        },
        {
            "uri": "file:///source_to_property_name.json"
        },
        {
            "uri": "file:///vary_source_property.json"
        },
        {
            "uri": "file:///set_spin_value.json"
        },
        {
            "uri": "file:///remove_from_array.json"
        },
        {
            "uri": "file:///array_conversion_type.json"
        },
        {
            "uri": "file:///flatten_2D_array.json"
        },
        {
            "uri": "file:///transpose_2D_array.json"
        },
        {
            "uri": "file:///Math_within_bounds.json"
        },
        {
            "uri": "file:///generate_ivy_core.json"
        },
        {
            "uri": "file:///set_point_ratio.json"
        },
        {
            "uri": "file:///set_point_tangent.json"
        },
        {
            "uri": "file:///convert_to_points.json"
        },
        {
            "uri": "file:///ivy_default_leaf_mesh.json"
        },
        {
            "uri": "file:///get_strands_start_points.json"
        },
        {
            "uri": "file:///Math_quaternion_to_euler.json"
        },
        {
            "uri": "file:///Math_radians_to_degrees.json"
        },
        {
            "uri": "file:///Math_quaternion_invert.json"
        },
        {
            "uri": "file:///Math_lerp_with_clamp.json"
        },
        {
            "uri": "file:///Math_nlerp.json"
        },
        {
            "uri": "file:///Math_quaternion_slerp.json"
        },
        {
            "uri": "file:///generate_ivy.json"
        },
        {
            "uri": "file:///int_array_filter.json"
        },
        {
            "uri": "file:///set_geo_property_data.json"
        },
        {
            "uri": "file:///create_strands_from_counts.json"
        },
        {
            "uri": "file:///Arnold_enums.json"
        },
        {
            "uri": "file:///set_Arnold_parameter.json"
        },
        {
            "uri": "file:///Arnold_ray_types.json"
        },
        {
            "uri": "file:///Arnold_ray_bitmask.json"
        },
        {
            "uri": "file:///set_Arnold_geo_settings.json"
        },
        {
            "uri": "file:///set_Arnold_strands_settings.json"
        },
        {
            "uri": "file:///create_arrow_strands.json"
        },
        {
            "uri": "file:///ivy_light.json"
        },
        {
            "uri": "file:///compute_on_frame.json"
        }
    ],
    "namespaces": [],
    "types": [],
    "compounds": [
        {
            "name": "MJCG::Graphs::ivy_point_light",
            "uriImported": "file:///__duplicateCompoundURIHelper__",
            "metadata": [
                {
                    "metaName": "io_nodes",
                    "metadata": [
                        {
                            "metaName": "io_inodes",
                            "metadata": [
                                {
                                    "metaName": "input",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "113.158 196.344"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "io_onodes",
                            "metadata": [
                                {
                                    "metaName": "output",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "io_ports"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "117.578 362.74"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "metaName": "backdrop",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#456d4e"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Init seeds and leaf settings. The seeds are the positions from where the ivy will start growing."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-937.383 -289.223 561.521 381.231"
                        }
                    ]
                },
                {
                    "metaName": "backdrop1",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#36606d"
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-1670.04 113.643 1298.15 436.002"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Init a surface for the ivy to grow onto. Compute on frame is only to make the demo faster with \"simulation mode\", as using the ivy_surface diagnostic forces the surface to evaluate each frame."
                        }
                    ]
                },
                {
                    "metaName": "backdrop2",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d3f3f"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Generates the ivy growth. Processing mode is set to \"iteration\", \nso only the final result is generated."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-269.846 32.9987 337.987 448.317"
                        }
                    ]
                },
                {
                    "metaName": "backdrop3",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d4b67"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Create a point light. The ivy will try to grow toward it."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-946.074 565.459 570.256 335.919"
                        }
                    ]
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Graph,terminal"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Simulation::Common,compute_on_frame"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Geometry::Query,sample_property"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Geometry::Query,generate_sample_locations"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Time,time"
                },
                {
                    "metaName": "ViewportRect",
                    "metaType": "string",
                    "metaValue": "-1728.47 -323.15 2151.46 1241.8"
                },
                {
                    "metaName": "compoundIsGraph",
                    "metaValue": "true"
                },
                {
                    "metaName": "author",
                    "metaType": "string",
                    "metaValue": "Maxime Jeanmougin"
                },
                {
                    "metaName": "category",
                    "metaType": "string",
                    "metaValue": "MJCG"
                },
                {
                    "metaName": "description",
                    "metaType": "string",
                    "metaValue": "Generate ivy growth which try to aim in the direction of a point light"
                },
                {
                    "metaName": "thumbnail",
                    "metaType": "string",
                    "metaValue": "ivy_point_light_thumb.png"
                }
            ],
            "ports": [],
            "compounds": [
                {
                    "name": "add_noise",
                    "uriImported": "file:///__duplicateCompoundURIHelper__",
                    "metadata": [
                        {
                            "metaName": "io_nodes",
                            "metadata": [
                                {
                                    "metaName": "io_inodes",
                                    "metadata": [
                                        {
                                            "metaName": "input",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "-2626.82 482.385"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "mesh"
                                                        },
                                                        {
                                                            "metaName": "magnitude"
                                                        },
                                                        {
                                                            "metaName": "num_frequencies"
                                                        },
                                                        {
                                                            "metaName": "frequency"
                                                        },
                                                        {
                                                            "metaName": "ratio"
                                                        },
                                                        {
                                                            "metaName": "frequency_ratio"
                                                        },
                                                        {
                                                            "metaName": "time"
                                                        },
                                                        {
                                                            "metaName": "seed"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "metaName": "io_onodes",
                                    "metadata": [
                                        {
                                            "metaName": "output",
                                            "metadata": [
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "out_mesh"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "-854.16 452.26"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "ViewportRect",
                            "metaType": "string",
                            "metaValue": "-2706.72 138.988 2158.57 1245.9"
                        }
                    ],
                    "ports": [
                        {
                            "portName": "mesh",
                            "portDirection": "input",
                            "portType": "Amino::Object"
                        },
                        {
                            "portName": "out_mesh",
                            "portDirection": "output",
                            "portType": "Amino::Object"
                        },
                        {
                            "portName": "magnitude",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "num_frequencies",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "frequency",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "ratio",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "frequency_ratio",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "time",
                            "portDirection": "input",
                            "portType": "Core::Fields::ScalarField"
                        },
                        {
                            "portName": "seed",
                            "portDirection": "input",
                            "portType": "long"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "add",
                            "nodeType": "Core::Math::add",
                            "multiInPortNames": [
                                "point_position",
                                "result"
                            ],
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-1628.6 551.418"
                                }
                            ]
                        },
                        {
                            "nodeName": "fractal_turbulence_field",
                            "nodeType": "Core::Fields::fractal_turbulence_field",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-2258.93 771.066"
                                }
                            ]
                        },
                        {
                            "nodeName": "get_point_position",
                            "nodeType": "Geometry::Properties::get_point_position",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-2256.22 578.164"
                                }
                            ]
                        },
                        {
                            "nodeName": "sample_field",
                            "nodeType": "Core::Fields::sample_field",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-1890.35 699.368"
                                }
                            ]
                        },
                        {
                            "nodeName": "set_point_position",
                            "nodeType": "Geometry::Properties::set_point_position",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-1384.6 457.538"
                                }
                            ]
                        },
                        {
                            "nodeName": "update_mesh_normals",
                            "nodeType": "Geometry::Mesh::update_mesh_normals",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-1144.53 431.593"
                                }
                            ]
                        }
                    ],
                    "connections": [
                        {
                            "source": "get_point_position.point_position",
                            "target": "add.first.point_position"
                        },
                        {
                            "source": "sample_field.result",
                            "target": "add.first.result"
                        },
                        {
                            "source": "add.output",
                            "target": "set_point_position.positions"
                        },
                        {
                            "source": "fractal_turbulence_field.noise_field",
                            "target": "sample_field.field"
                        },
                        {
                            "source": ".mesh",
                            "target": "get_point_position.geometry"
                        },
                        {
                            "source": "get_point_position.point_position",
                            "target": "sample_field.position"
                        },
                        {
                            "source": "set_point_position.out_geometry",
                            "target": "update_mesh_normals.mesh"
                        },
                        {
                            "source": ".mesh",
                            "target": "set_point_position.geometry"
                        },
                        {
                            "source": ".magnitude",
                            "target": "fractal_turbulence_field.magnitude"
                        },
                        {
                            "source": ".num_frequencies",
                            "target": "fractal_turbulence_field.num_frequencies"
                        },
                        {
                            "source": ".frequency",
                            "target": "fractal_turbulence_field.frequency"
                        },
                        {
                            "source": ".ratio",
                            "target": "fractal_turbulence_field.ratio"
                        },
                        {
                            "source": ".frequency_ratio",
                            "target": "fractal_turbulence_field.frequency_ratio"
                        },
                        {
                            "source": ".time",
                            "target": "fractal_turbulence_field.time"
                        },
                        {
                            "source": ".seed",
                            "target": "fractal_turbulence_field.seed"
                        },
                        {
                            "source": "update_mesh_normals.out_mesh",
                            "target": ".out_mesh"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "fractal_turbulence_field.magnitude",
                            "valueType": "float",
                            "value": "10f"
                        },
                        {
                            "valueName": "fractal_turbulence_field.num_frequencies",
                            "valueType": "float",
                            "value": "10f"
                        },
                        {
                            "valueName": "fractal_turbulence_field.frequency",
                            "valueType": "float",
                            "value": "0.0500000007f"
                        },
                        {
                            "valueName": "fractal_turbulence_field.ratio",
                            "valueType": "float",
                            "value": "0.5f"
                        },
                        {
                            "valueName": "fractal_turbulence_field.frequency_ratio",
                            "valueType": "float",
                            "value": "0.5f"
                        },
                        {
                            "valueName": "fractal_turbulence_field.seed",
                            "valueType": "long",
                            "value": "2"
                        },
                        {
                            "valueName": "sample_field.position",
                            "valueType": "Math::float3",
                            "value": {
                                "x": "0f",
                                "y": "0f",
                                "z": "0f"
                            }
                        },
                        {
                            "valueName": "update_mesh_normals.remove_face_vertex_normal",
                            "valueType": "bool",
                            "value": "true"
                        }
                    ],
                    "reservedNodeNames": [
                        {
                            "name": "input"
                        },
                        {
                            "name": "output"
                        }
                    ]
                }
            ],
            "compoundNodes": [
                {
                    "nodeName": "ivy_surface",
                    "nodeType": "MJCG::Modeling::Growth::ivy_surface",
                    "fanInPortNames": {
                        "mesh": [
                            "out_mesh"
                        ]
                    },
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1134.42 165.832"
                        }
                    ]
                },
                {
                    "nodeName": "value2",
                    "valueType": "Math::float3",
                    "metadata": [
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-915 -196"
                        }
                    ]
                },
                {
                    "nodeName": "ivy_seeds",
                    "nodeType": "MJCG::Modeling::Growth::ivy_seeds",
                    "fanInPortNames": {
                        "positions": [
                            "sampled_data"
                        ],
                        "leaf_geometries": []
                    },
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "PortExpandedState",
                            "metadata": [
                                {
                                    "metaName": "positions",
                                    "metaType": "string",
                                    "metaValue": "1"
                                }
                            ]
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-652 -244"
                        }
                    ]
                },
                {
                    "nodeName": "generate_ivy",
                    "nodeType": "MJCG::Modeling::Growth::generate_ivy",
                    "fanInPortNames": {
                        "surfaces": [
                            "surface"
                        ],
                        "Lights": [
                            "light"
                        ],
                        "seeds": [
                            "seeds"
                        ]
                    },
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::final",
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-221.063 94.351"
                        }
                    ]
                },
                {
                    "nodeName": "create_mesh_plane",
                    "nodeType": "Modeling::Primitive::create_mesh_plane",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1648.84 185.631"
                        }
                    ]
                },
                {
                    "nodeName": "ivy_light",
                    "nodeType": "MJCG::Modeling::Growth::ivy_light",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-668.643 615.469"
                        }
                    ]
                },
                {
                    "nodeName": "add_noise",
                    "nodeType": "add_noise",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1397.51 140.422"
                        }
                    ]
                },
                {
                    "nodeName": "value",
                    "valueType": "Math::float3",
                    "metadata": [
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-926.592 639.596"
                        }
                    ]
                },
                {
                    "nodeName": "compute_on_frame",
                    "nodeType": "Simulation::Common::compute_on_frame",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-880.135 267.858"
                        }
                    ]
                },
                {
                    "nodeName": "terminal",
                    "nodeType": "Core::Graph::terminal",
                    "fanInPortNames": {
                        "final": [
                            "cached_value"
                        ],
                        "proxy": [
                            "cached_value"
                        ],
                        "diagnostic": []
                    },
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-623.648 268.464"
                        }
                    ]
                }
            ],
            "connections": [
                {
                    "source": "ivy_surface.surface",
                    "target": "generate_ivy.surfaces.surface"
                },
                {
                    "source": "ivy_seeds.seeds",
                    "target": "generate_ivy.seeds.seeds"
                },
                {
                    "source": "ivy_light.light",
                    "target": "generate_ivy.Lights.light"
                },
                {
                    "source": "create_mesh_plane.plane_mesh",
                    "target": "add_noise.mesh"
                },
                {
                    "source": "value2.output",
                    "target": "ivy_seeds.positions.sampled_data"
                },
                {
                    "source": "value.output",
                    "target": "ivy_light.position"
                },
                {
                    "source": "add_noise.out_mesh",
                    "target": "ivy_surface.mesh.out_mesh"
                },
                {
                    "source": "ivy_surface.surface",
                    "target": "compute_on_frame.value_to_pull"
                },
                {
                    "source": "compute_on_frame.cached_value",
                    "target": "terminal.proxy.cached_value"
                },
                {
                    "source": "compute_on_frame.cached_value",
                    "target": "terminal.final.cached_value"
                }
            ],
            "values": [
                {
                    "valueName": "ivy_surface.display_property",
                    "valueType": "MJCG::ivySurfaceDiagnosticType",
                    "value": "Off"
                },
                {
                    "valueName": "value2.value",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0.300000012f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "ivy_seeds.tilt_angle",
                    "valueType": "float",
                    "value": "5f"
                },
                {
                    "valueName": "ivy_seeds.random_scale",
                    "valueType": "float",
                    "value": "0.5f"
                },
                {
                    "valueName": "generate_ivy.processing_mode",
                    "valueType": "MJCG::processingType",
                    "value": "Simulation"
                },
                {
                    "valueName": "generate_ivy.max_iterations",
                    "valueType": "long",
                    "value": "1000"
                },
                {
                    "valueName": "generate_ivy.max_self_shadow",
                    "valueType": "float",
                    "value": "20f"
                },
                {
                    "valueName": "create_mesh_plane.length",
                    "valueType": "float",
                    "value": "20f"
                },
                {
                    "valueName": "create_mesh_plane.width",
                    "valueType": "float",
                    "value": "20f"
                },
                {
                    "valueName": "create_mesh_plane.length_segments",
                    "valueType": "int",
                    "value": "100L"
                },
                {
                    "valueName": "create_mesh_plane.width_segments",
                    "valueType": "int",
                    "value": "100L"
                },
                {
                    "valueName": "create_mesh_plane.up_axis",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "1f",
                        "z": "1f"
                    }
                },
                {
                    "valueName": "ivy_light.enable",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "ivy_light.position",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "20f",
                        "y": "20f",
                        "z": "20f"
                    }
                },
                {
                    "valueName": "ivy_light.kill_occluded",
                    "valueType": "bool",
                    "value": "false"
                },
                {
                    "valueName": "ivy_light.point_light_size",
                    "valueType": "float",
                    "value": "2f"
                },
                {
                    "valueName": "ivy_light.sunlight",
                    "valueType": "bool",
                    "value": "false"
                },
                {
                    "valueName": "add_noise.mesh",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "add_noise.magnitude",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "add_noise.num_frequencies",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "add_noise.frequency",
                    "valueType": "float",
                    "value": "0.0500000007f"
                },
                {
                    "valueName": "add_noise.ratio",
                    "valueType": "float",
                    "value": "0.5f"
                },
                {
                    "valueName": "add_noise.frequency_ratio",
                    "valueType": "float",
                    "value": "0.5f"
                },
                {
                    "valueName": "add_noise.time",
                    "valueType": "Core::Fields::ScalarField",
                    "value": {}
                },
                {
                    "valueName": "add_noise.seed",
                    "valueType": "long",
                    "value": "2"
                },
                {
                    "valueName": "value.value",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "10f",
                        "y": "10f",
                        "z": "10f"
                    }
                }
            ],
            "reservedNodeNames": [
                {
                    "name": "input"
                },
                {
                    "name": "output"
                }
            ]
        }
    ]
}
