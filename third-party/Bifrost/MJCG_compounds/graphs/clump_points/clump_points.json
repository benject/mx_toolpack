{
    "header": {
        "metadata": [
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///bifrost_object_i.json"
        },
        {
            "uri": "file:///Math_types.json"
        },
        {
            "uri": "file:///scatter_types.json"
        },
        {
            "uri": "file:///geometry_types.json"
        },
        {
            "uri": "file:///bifrost_geometry_query_types.json"
        },
        {
            "uri": "file:///Math_long.json"
        },
        {
            "uri": "file:///Math_float.json"
        },
        {
            "uri": "file:///Math_double.json"
        },
        {
            "uri": "file:///Math_char.json"
        },
        {
            "uri": "file:///Math_int.json"
        },
        {
            "uri": "file:///Math_short.json"
        },
        {
            "uri": "file:///Math_uchar.json"
        },
        {
            "uri": "file:///Math_uint.json"
        },
        {
            "uri": "file:///Math_ulong.json"
        },
        {
            "uri": "file:///Math_ushort.json"
        },
        {
            "uri": "file:///riv_types.json"
        },
        {
            "uri": "file:///point_types.json"
        },
        {
            "uri": "file:///FCurve.json"
        },
        {
            "uri": "file:///riv_ops.json"
        },
        {
            "uri": "file:///get_indexer_element.json"
        },
        {
            "uri": "file:///math_util.json"
        },
        {
            "uri": "file:///get_loc_element.json"
        },
        {
            "uri": "file:///invalid_index.json"
        },
        {
            "uri": "file:///get_mesh_geo_loc_data.json"
        },
        {
            "uri": "file:///Math_constants.json"
        },
        {
            "uri": "file:///max_weight.json"
        },
        {
            "uri": "file:///mesh_v_interp.json"
        },
        {
            "uri": "file:///CoreArrayOps.json"
        },
        {
            "uri": "file:///get_property_any.json"
        },
        {
            "uri": "file:///get_property.json"
        },
        {
            "uri": "file:///get_geo_property.json"
        },
        {
            "uri": "file:///create_object_from_schema.json"
        },
        {
            "uri": "file:///is_a.json"
        },
        {
            "uri": "file:///is_a_range_geo_property.json"
        },
        {
            "uri": "file:///get_range_geo_property.json"
        },
        {
            "uri": "file:///mesh_fv_interp.json"
        },
        {
            "uri": "file:///mesh_f_interp.json"
        },
        {
            "uri": "file:///Core_Array_empty_array.json"
        },
        {
            "uri": "file:///choose_mesh_values.json"
        },
        {
            "uri": "file:///get_sub_object.json"
        },
        {
            "uri": "file:///get_point_count.json"
        },
        {
            "uri": "file:///get_geo_component_count.json"
        },
        {
            "uri": "file:///get_mesh_structure.json"
        },
        {
            "uri": "file:///Math_bool.json"
        },
        {
            "uri": "file:///has_property.json"
        },
        {
            "uri": "file:///get_point_geo_loc_data.json"
        },
        {
            "uri": "file:///point_p_interp.json"
        },
        {
            "uri": "file:///sample_volume_property.json"
        },
        {
            "uri": "file:///Math_conversion.json"
        },
        {
            "uri": "file:///get_strands_structure.json"
        },
        {
            "uri": "file:///get_strand_geo_loc_data.json"
        },
        {
            "uri": "file:///Core_Constants_default_value.json"
        },
        {
            "uri": "file:///strand_p_interp.json"
        },
        {
            "uri": "file:///strand_s_interp.json"
        },
        {
            "uri": "file:///choose_strand_values.json"
        },
        {
            "uri": "file:///get_geo_schema_type.json"
        },
        {
            "uri": "file:///switch_is_a.json"
        },
        {
            "uri": "file:///sample_property.json"
        },
        {
            "uri": "file:///Math_matrix_to_quaternion.json"
        },
        {
            "uri": "file:///Math_length_squared.json"
        },
        {
            "uri": "file:///normal_and_tangent_to_orientation.json"
        },
        {
            "uri": "file:///Core_Array_array_is_empty.json"
        },
        {
            "uri": "file:///get_geo_property_check.json"
        },
        {
            "uri": "file:///get_geo_target_count.json"
        },
        {
            "uri": "file:///CoreStringOps.json"
        },
        {
            "uri": "file:///volume_types.json"
        },
        {
            "uri": "file:///volume_nodedefs.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_scalar.json"
        },
        {
            "uri": "file:///Math_multiply_quaternions.json"
        },
        {
            "uri": "file:///Math_rotate_by_quaternion.json"
        },
        {
            "uri": "file:///create_volume_geo_prop.json"
        },
        {
            "uri": "file:///is_a_mesh.json"
        },
        {
            "uri": "file:///is_a_strands.json"
        },
        {
            "uri": "file:///is_a_points.json"
        },
        {
            "uri": "file:///is_a_volume.json"
        },
        {
            "uri": "file:///get_target_component.json"
        },
        {
            "uri": "file:///create_data_geo_prop.json"
        },
        {
            "uri": "file:///set_property_any.json"
        },
        {
            "uri": "file:///set_property.json"
        },
        {
            "uri": "file:///set_geo_property.array.json"
        },
        {
            "uri": "file:///set_geo_property.scalar.json"
        },
        {
            "uri": "file:///Math_axis_angle_to_quaternion.json"
        },
        {
            "uri": "file:///Math_vector4_to_vector3.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_vector.json"
        },
        {
            "uri": "file:///rotate_points.json"
        },
        {
            "uri": "file:///Math_almost_equal.json"
        },
        {
            "uri": "file:///Math_quaternion_to_axis_angle.json"
        },
        {
            "uri": "file:///Math_array.json"
        },
        {
            "uri": "file:///set_geo_property_data.json"
        },
        {
            "uri": "file:///get_point_normal.json"
        },
        {
            "uri": "file:///get_point_position.json"
        },
        {
            "uri": "file:///build_closest_accelerator.json"
        },
        {
            "uri": "file:///sample_closest_point_accelerator.json"
        },
        {
            "uri": "file:///get_closest_point.json"
        },
        {
            "uri": "file:///sample_interpreted_auto_port_as_vector.json"
        },
        {
            "uri": "file:///erase_property.json"
        },
        {
            "uri": "file:///Core_Array_slice_array.json"
        },
        {
            "uri": "file:///update_mesh_normals.json"
        },
        {
            "uri": "file:///access_offset_array.json"
        },
        {
            "uri": "file:///increment_decrement.json"
        },
        {
            "uri": "file:///get_indexed_geo_property_check.json"
        },
        {
            "uri": "file:///UV_set_name.json"
        },
        {
            "uri": "file:///UV_type_filter.json"
        },
        {
            "uri": "file:///UV_type_converter.json"
        },
        {
            "uri": "file:///get_mesh_UVs.json"
        },
        {
            "uri": "file:///int_filter.json"
        },
        {
            "uri": "file:///project_vector.json"
        },
        {
            "uri": "file:///orient_points_by_geometry.json"
        },
        {
            "uri": "file:///add_points_to_points.json"
        },
        {
            "uri": "file:///validate_points.json"
        },
        {
            "uri": "file:///construct_points.json"
        },
        {
            "uri": "file:///generate_sample_locations.json"
        },
        {
            "uri": "file:///get_max_index.json"
        },
        {
            "uri": "file:///scatter_points_internal.json"
        },
        {
            "uri": "file:///sample_closest_accelerator.json"
        },
        {
            "uri": "file:///get_closest_locations.json"
        },
        {
            "uri": "file:///jotun_rand.json"
        },
        {
            "uri": "file:///fluids_types.json"
        },
        {
            "uri": "file:///fluids_nodedefs.json"
        },
        {
            "uri": "file:///random_value.json"
        },
        {
            "uri": "file:///find_all_in_array.json"
        },
        {
            "uri": "file:///sample_closest_in_radius_accelerator.json"
        },
        {
            "uri": "file:///Core_Array_sum_array_impl.json"
        },
        {
            "uri": "file:///Core_Array_sum_array.json"
        },
        {
            "uri": "file:///half_of.json"
        },
        {
            "uri": "file:///Core_Array_flatten_nested_array.json"
        },
        {
            "uri": "file:///sample_interpreted_auto_port_as_scalar.json"
        },
        {
            "uri": "file:///set_point_position.json"
        },
        {
            "uri": "file:///weighted_sample_elimination.json"
        },
        {
            "uri": "file:///scatter_points_blue_noise.json"
        },
        {
            "uri": "file:///mask_and_number_interaction.json"
        },
        {
            "uri": "file:///compute_mesh_surface_area.json"
        },
        {
            "uri": "file:///scatter_points_on_mesh.json"
        },
        {
            "uri": "file:///twice_of.json"
        },
        {
            "uri": "file:///compute_bounding_sphere.json"
        },
        {
            "uri": "file:///delete_points_in_points.json"
        },
        {
            "uri": "file:///delete_points.json"
        },
        {
            "uri": "file:///cull_overlapping_positions.json"
        },
        {
            "uri": "file:///merge_meshes.json"
        },
        {
            "uri": "file:///merge_points.json"
        },
        {
            "uri": "file:///merge_strands.json"
        },
        {
            "uri": "file:///merge_geometry.json"
        },
        {
            "uri": "file:///cull_overlapping_points.json"
        },
        {
            "uri": "file:///cull_points.json"
        },
        {
            "uri": "file:///density_to_radius.json"
        },
        {
            "uri": "file:///get_volume_tile_info.json"
        },
        {
            "uri": "file:///scatter_points.json"
        },
        {
            "uri": "file:///Math_lerp_with_clamp.json"
        },
        {
            "uri": "file:///simulation_types.json"
        },
        {
            "uri": "file:///simulation_nodedefs.json"
        },
        {
            "uri": "file:///set_sub_object_property.json"
        },
        {
            "uri": "file:///validate_mesh.json"
        },
        {
            "uri": "file:///construct_mesh.json"
        },
        {
            "uri": "file:///Core_Array_reverse_array.json"
        },
        {
            "uri": "file:///Math_quaternion_to_matrix.json"
        },
        {
            "uri": "file:///Math_compose_transform_matrix.json"
        },
        {
            "uri": "file:///Math_vector3_to_vector4.json"
        },
        {
            "uri": "file:///rotation_between_vectors.json"
        },
        {
            "uri": "file:///create_mesh_plane.json"
        },
        {
            "uri": "file:///object_terminal.json"
        },
        {
            "uri": "file:///get_property_keys.json"
        },
        {
            "uri": "file:///is_empty.json"
        },
        {
            "uri": "file:///materials.json"
        },
        {
            "uri": "file:///set_point_shape.json"
        }
    ],
    "namespaces": [],
    "types": [],
    "compounds": [
        {
            "name": "MJCG::Graphs::clump_points",
            "uriImported": "file:///__duplicateCompoundURIHelper__",
            "metadata": [
                {
                    "metaName": "io_nodes",
                    "metadata": [
                        {
                            "metaName": "io_inodes",
                            "metadata": [
                                {
                                    "metaName": "input",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "956.955 448.322"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "io_onodes",
                            "metadata": [
                                {
                                    "metaName": "output",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "io_ports"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "1229.37 457.02"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "metaName": "backdrop",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#445a6d"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Create a plane and draw it in the viewport."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-2099.75 70.5267 547.702 410.827"
                        }
                    ]
                },
                {
                    "metaName": "backdrop1",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#456d4a"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "We scatter two sets of points on the plane. \nThe red points are the points around which to clump.\nThe green points are the points to be clumped."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-1521.34 -258.906 676.165 871.076"
                        }
                    ]
                },
                {
                    "metaName": "backdrop2",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d4545"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "For each green points, we find the closest ref point and get its position."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-793.107 -203.046 575.66 521.835"
                        }
                    ]
                },
                {
                    "metaName": "backdrop3",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#69546d"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "We interpolate the original position of the green points with their respective closest red points and set the point_position back.\nif a closest point is not found within the search range, the point is not affected. We do this using the \"found\" condition.\nWe use time to control the interpolation so that it is animated."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-199.913 100.572 1066.69 650.936"
                        }
                    ]
                },
                {
                    "metaName": "backdrop4",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d6c4b"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Set color and render settings."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "899.103 -297.739 823.914 686.349"
                        }
                    ]
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Logic,if"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Graph,terminal"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "input"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Graph,pass"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Modeling::Primitive,create_mesh_plane"
                },
                {
                    "metaName": "ViewportRect",
                    "metaType": "string",
                    "metaValue": "-2157.62 -932.951 3944.73 2346.27"
                },
                {
                    "metaName": "compoundIsGraph",
                    "metaValue": "true"
                },
                {
                    "metaName": "author",
                    "metaType": "string",
                    "metaValue": "Maxime Jeanmougin"
                },
                {
                    "metaName": "category",
                    "metaType": "string",
                    "metaValue": "MJCG"
                },
                {
                    "metaName": "description",
                    "metaType": "string",
                    "metaValue": "Clumps points around other points."
                },
                {
                    "metaName": "thumbnail",
                    "metaType": "string",
                    "metaValue": "clump_points_thumb.png"
                }
            ],
            "ports": [],
            "compoundNodes": [
                {
                    "nodeName": "scatter_points",
                    "nodeType": "Modeling::Points::scatter_points",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "PortExpandedState",
                            "metadata": [
                                {
                                    "metaName": "Scatter Settings",
                                    "metaType": "string",
                                    "metaValue": "0"
                                }
                            ]
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1164.79 -196.017"
                        }
                    ]
                },
                {
                    "nodeName": "scatter_points1",
                    "nodeType": "Modeling::Points::scatter_points",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "PortExpandedState",
                            "metadata": [
                                {
                                    "metaName": "Scatter Settings",
                                    "metaType": "string",
                                    "metaValue": "0"
                                }
                            ]
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1152.48 274.007"
                        }
                    ]
                },
                {
                    "nodeName": "get_closest_point",
                    "nodeType": "Geometry::Query::get_closest_point",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-754.211 -1.29205"
                        }
                    ]
                },
                {
                    "nodeName": "value",
                    "valueType": "float",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "100"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1475.3 -75.2686"
                        }
                    ]
                },
                {
                    "nodeName": "value1",
                    "valueType": "float",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "10000"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1465.22 391.316"
                        }
                    ]
                },
                {
                    "nodeName": "get_from_array",
                    "nodeType": "Core::Array::get_from_array",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-480.325 -102.92"
                        }
                    ]
                },
                {
                    "nodeName": "linear_interpolate",
                    "nodeType": "Core::Math::linear_interpolate",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "95.853 388.188"
                        }
                    ]
                },
                {
                    "nodeName": "set_point_position",
                    "nodeType": "Geometry::Properties::set_point_position",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "612.982 117.635"
                        }
                    ]
                },
                {
                    "nodeName": "time",
                    "nodeType": "Core::Time::time",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-168.543 500.614"
                        }
                    ]
                },
                {
                    "nodeName": "create_mesh_plane",
                    "nodeType": "Modeling::Primitive::create_mesh_plane",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-2077.74 127.771"
                        }
                    ]
                },
                {
                    "nodeName": "terminal",
                    "nodeType": "Core::Graph::terminal",
                    "fanInPortNames": {
                        "final": [
                            "plane_mesh"
                        ],
                        "proxy": [
                            "plane_mesh"
                        ],
                        "diagnostic": []
                    },
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1818.5 217.836"
                        }
                    ]
                },
                {
                    "nodeName": "pass",
                    "nodeType": "Core::Graph::pass",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1483.42 145.06"
                        }
                    ]
                },
                {
                    "nodeName": "set_geo_property",
                    "nodeType": "Geometry::Properties::set_geo_property",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "944.293 -219.588"
                        }
                    ]
                },
                {
                    "nodeName": "set_point_shape",
                    "nodeType": "Geometry::Properties::set_point_shape",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "1206.07 -243.747"
                        }
                    ]
                },
                {
                    "nodeName": "set_geo_property1",
                    "nodeType": "Geometry::Properties::set_geo_property",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "945.773 94.7568"
                        }
                    ]
                },
                {
                    "nodeName": "set_point_shape1",
                    "nodeType": "Geometry::Properties::set_point_shape",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "1206.15 71.1206"
                        }
                    ]
                },
                {
                    "nodeName": "terminal1",
                    "nodeType": "Core::Graph::terminal",
                    "fanInPortNames": {
                        "final": [
                            "out_points",
                            "out_points1"
                        ],
                        "proxy": [
                            "out_points",
                            "out_points1"
                        ],
                        "diagnostic": []
                    },
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "1480.97 -85.811"
                        }
                    ]
                },
                {
                    "nodeName": "if",
                    "nodeType": "Core::Logic::if",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "358.683 228.71"
                        }
                    ]
                }
            ],
            "connections": [
                {
                    "source": "scatter_points.points",
                    "target": "get_closest_point.geometry"
                },
                {
                    "source": "scatter_points1.positions",
                    "target": "get_closest_point.positions"
                },
                {
                    "source": "value.output",
                    "target": "scatter_points.amount"
                },
                {
                    "source": "value1.output",
                    "target": "scatter_points1.amount"
                },
                {
                    "source": "get_closest_point.point_indices",
                    "target": "get_from_array.index"
                },
                {
                    "source": "scatter_points.positions",
                    "target": "get_from_array.array"
                },
                {
                    "source": "scatter_points1.points",
                    "target": "set_point_position.geometry"
                },
                {
                    "source": "scatter_points1.positions",
                    "target": "linear_interpolate.first"
                },
                {
                    "source": "get_from_array.value",
                    "target": "linear_interpolate.second"
                },
                {
                    "source": "time.seconds",
                    "target": "linear_interpolate.fraction"
                },
                {
                    "source": "create_mesh_plane.plane_mesh",
                    "target": "terminal.proxy.plane_mesh"
                },
                {
                    "source": "create_mesh_plane.plane_mesh",
                    "target": "terminal.final.plane_mesh"
                },
                {
                    "source": "create_mesh_plane.plane_mesh",
                    "target": "pass.input"
                },
                {
                    "source": "pass.output",
                    "target": "scatter_points1.geometry"
                },
                {
                    "source": "pass.output",
                    "target": "scatter_points.geometry"
                },
                {
                    "source": "set_geo_property.out_geometry",
                    "target": "set_point_shape.points"
                },
                {
                    "source": "scatter_points.points",
                    "target": "set_geo_property.geometry"
                },
                {
                    "source": "set_geo_property1.out_geometry",
                    "target": "set_point_shape1.points"
                },
                {
                    "source": "set_point_position.out_geometry",
                    "target": "set_geo_property1.geometry"
                },
                {
                    "source": "set_point_shape.out_points",
                    "target": "terminal1.final.out_points"
                },
                {
                    "source": "set_point_shape1.out_points",
                    "target": "terminal1.final.out_points1"
                },
                {
                    "source": "set_point_shape1.out_points",
                    "target": "terminal1.proxy.out_points"
                },
                {
                    "source": "set_point_shape.out_points",
                    "target": "terminal1.proxy.out_points1"
                },
                {
                    "source": "get_closest_point.found",
                    "target": "if.condition"
                },
                {
                    "source": "scatter_points1.positions",
                    "target": "if.false_case"
                },
                {
                    "source": "linear_interpolate.interpolated",
                    "target": "if.true_case"
                },
                {
                    "source": "if.output",
                    "target": "set_point_position.positions"
                }
            ],
            "values": [
                {
                    "valueName": "scatter_points.scatter_mode",
                    "valueType": "Modeling::Points::ScatteringMode",
                    "value": "BlueNoise"
                },
                {
                    "valueName": "scatter_points.amount",
                    "valueType": "float",
                    "value": "100f"
                },
                {
                    "valueName": "scatter_points1.geometry",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "scatter_points1.scatter_mode",
                    "valueType": "Modeling::Points::ScatteringMode",
                    "value": "BlueNoise"
                },
                {
                    "valueName": "scatter_points1.amount_mode",
                    "valueType": "Modeling::Points::AmountMode",
                    "value": "Number"
                },
                {
                    "valueName": "scatter_points1.amount",
                    "valueType": "float",
                    "value": "10000f"
                },
                {
                    "valueName": "scatter_points1.density_weights_mode",
                    "valueType": "Modeling::Points::DensityWeightsMode",
                    "value": "Random"
                },
                {
                    "valueName": "scatter_points1.cull_overlapping",
                    "valueType": "bool",
                    "value": "false"
                },
                {
                    "valueName": "scatter_points1.overlapping_radius",
                    "valueType": "float",
                    "value": "0.100000001f"
                },
                {
                    "valueName": "scatter_points1.transfer_properties",
                    "valueType": "string",
                    "value": "point_normal"
                },
                {
                    "valueName": "scatter_points1.set_emit_location",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points1.set_orientations_from_geometry",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points1.normal_mode",
                    "valueType": "Modeling::Points::OrientPointsNormalMode",
                    "value": "point_normal"
                },
                {
                    "valueName": "scatter_points1.tangent_mode",
                    "valueType": "Modeling::Points::OrientPointsTangentMode",
                    "value": "UV"
                },
                {
                    "valueName": "scatter_points1.prioritize_normal",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points1.seed",
                    "valueType": "long",
                    "value": "0"
                },
                {
                    "valueName": "scatter_points1.max_number",
                    "valueType": "long",
                    "value": "1000000"
                },
                {
                    "valueName": "get_closest_point.cutoff_distance",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "value.value",
                    "valueType": "float",
                    "value": "100f"
                },
                {
                    "valueName": "value1.value",
                    "valueType": "float",
                    "value": "10000f"
                },
                {
                    "valueName": "linear_interpolate.clamp_negative",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "linear_interpolate.clamp_above_one",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "create_mesh_plane.length",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "create_mesh_plane.width",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "create_mesh_plane.length_segments",
                    "valueType": "int",
                    "value": "1L"
                },
                {
                    "valueName": "create_mesh_plane.width_segments",
                    "valueType": "int",
                    "value": "1L"
                },
                {
                    "valueName": "set_geo_property.property",
                    "valueType": "string",
                    "value": "color"
                },
                {
                    "valueName": "set_geo_property.data",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "1f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "set_geo_property.target",
                    "valueType": "string",
                    "value": "point_component"
                },
                {
                    "valueName": "set_point_shape.points",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "set_point_shape.shape",
                    "valueType": "Geometry::PointShapes",
                    "value": "Sphere"
                },
                {
                    "valueName": "set_point_shape.screen_aligned",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "set_point_shape.numeric_property",
                    "valueType": "string",
                    "value": "point_position"
                },
                {
                    "valueName": "set_point_shape.default_size",
                    "valueType": "float",
                    "value": "0.100000001f"
                },
                {
                    "valueName": "set_geo_property1.property",
                    "valueType": "string",
                    "value": "color"
                },
                {
                    "valueName": "set_geo_property1.data",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "1f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "set_geo_property1.target",
                    "valueType": "string",
                    "value": "point_component"
                },
                {
                    "valueName": "set_point_shape1.points",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "set_point_shape1.shape",
                    "valueType": "Geometry::PointShapes",
                    "value": "Sphere"
                },
                {
                    "valueName": "set_point_shape1.screen_aligned",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "set_point_shape1.numeric_property",
                    "valueType": "string",
                    "value": "point_position"
                },
                {
                    "valueName": "set_point_shape1.default_size",
                    "valueType": "float",
                    "value": "0.0500000007f"
                }
            ],
            "reservedNodeNames": [
                {
                    "name": "output"
                },
                {
                    "name": "input"
                }
            ]
        }
    ]
}
