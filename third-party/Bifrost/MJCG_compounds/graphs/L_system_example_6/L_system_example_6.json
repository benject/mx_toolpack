{
    "header": {
        "metadata": [
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///bifrost_object_i.json"
        },
        {
            "uri": "file:///Math_types.json"
        },
        {
            "uri": "file:///turtle_state_type.json"
        },
        {
            "uri": "file:///Math_long.json"
        },
        {
            "uri": "file:///Math_float.json"
        },
        {
            "uri": "file:///Math_double.json"
        },
        {
            "uri": "file:///Math_char.json"
        },
        {
            "uri": "file:///Math_int.json"
        },
        {
            "uri": "file:///Math_short.json"
        },
        {
            "uri": "file:///Math_uchar.json"
        },
        {
            "uri": "file:///Math_uint.json"
        },
        {
            "uri": "file:///Math_ulong.json"
        },
        {
            "uri": "file:///Math_ushort.json"
        },
        {
            "uri": "file:///riv_types.json"
        },
        {
            "uri": "file:///point_types.json"
        },
        {
            "uri": "file:///FCurve.json"
        },
        {
            "uri": "file:///riv_ops.json"
        },
        {
            "uri": "file:///jotun_rand.json"
        },
        {
            "uri": "file:///Math_conversion.json"
        },
        {
            "uri": "file:///increment_decrement.json"
        },
        {
            "uri": "file:///random_value.json"
        },
        {
            "uri": "file:///half_of.json"
        },
        {
            "uri": "file:///Math_axis_angle_to_quaternion.json"
        },
        {
            "uri": "file:///Math_degrees_to_radians.json"
        },
        {
            "uri": "file:///Math_multiply_quaternions.json"
        },
        {
            "uri": "file:///Math_bool.json"
        },
        {
            "uri": "file:///Math_rotate_by_quaternion.json"
        },
        {
            "uri": "file:///Math_euler_to_quaternion.json"
        },
        {
            "uri": "file:///remove_last_in_array.json"
        },
        {
            "uri": "file:///CoreStringOps.json"
        },
        {
            "uri": "file:///bifrost_geometry_query_types.json"
        },
        {
            "uri": "file:///geometry_types.json"
        },
        {
            "uri": "file:///create_object_from_schema.json"
        },
        {
            "uri": "file:///set_property_any.json"
        },
        {
            "uri": "file:///set_property.json"
        },
        {
            "uri": "file:///get_property_any.json"
        },
        {
            "uri": "file:///get_property.json"
        },
        {
            "uri": "file:///set_sub_object_property.json"
        },
        {
            "uri": "file:///validate_strands.json"
        },
        {
            "uri": "file:///construct_strands.json"
        },
        {
            "uri": "file:///has_property.json"
        },
        {
            "uri": "file:///create_volume_geo_prop.json"
        },
        {
            "uri": "file:///is_a.json"
        },
        {
            "uri": "file:///is_a_mesh.json"
        },
        {
            "uri": "file:///is_a_strands.json"
        },
        {
            "uri": "file:///is_a_points.json"
        },
        {
            "uri": "file:///is_a_volume.json"
        },
        {
            "uri": "file:///get_geo_schema_type.json"
        },
        {
            "uri": "file:///switch_is_a.json"
        },
        {
            "uri": "file:///get_target_component.json"
        },
        {
            "uri": "file:///create_data_geo_prop.json"
        },
        {
            "uri": "file:///get_geo_component_count.json"
        },
        {
            "uri": "file:///set_geo_property.array.json"
        },
        {
            "uri": "file:///set_geo_property.scalar.json"
        },
        {
            "uri": "file:///set_point_size.json"
        },
        {
            "uri": "file:///add_points_to_points.json"
        },
        {
            "uri": "file:///validate_points.json"
        },
        {
            "uri": "file:///construct_points.json"
        },
        {
            "uri": "file:///set_point_orientation.json"
        },
        {
            "uri": "file:///Math_quaternion_to_matrix.json"
        },
        {
            "uri": "file:///Math_compose_transform_matrix.json"
        },
        {
            "uri": "file:///Math_matrix_to_quaternion.json"
        },
        {
            "uri": "file:///Math_vector3_to_vector4.json"
        },
        {
            "uri": "file:///Math_vector4_to_vector3.json"
        },
        {
            "uri": "file:///multiply_vector_by_matrix.json"
        },
        {
            "uri": "file:///set_point_length.json"
        },
        {
            "uri": "file:///get_property_keys.json"
        },
        {
            "uri": "file:///is_empty.json"
        },
        {
            "uri": "file:///materials.json"
        },
        {
            "uri": "file:///instances.json"
        },
        {
            "uri": "file:///Core_Array_flatten_nested_array.json"
        },
        {
            "uri": "file:///Core_Array_array_is_empty.json"
        },
        {
            "uri": "file:///Math_array.json"
        },
        {
            "uri": "file:///CoreArrayOps.json"
        },
        {
            "uri": "file:///validate_mesh.json"
        },
        {
            "uri": "file:///construct_mesh.json"
        },
        {
            "uri": "file:///Math_constants.json"
        },
        {
            "uri": "file:///Core_Array_slice_array.json"
        },
        {
            "uri": "file:///get_geo_property.json"
        },
        {
            "uri": "file:///get_point_position.json"
        },
        {
            "uri": "file:///get_sub_object.json"
        },
        {
            "uri": "file:///erase_property.json"
        },
        {
            "uri": "file:///update_mesh_normals.json"
        },
        {
            "uri": "file:///Math_length_squared.json"
        },
        {
            "uri": "file:///Math_almost_equal.json"
        },
        {
            "uri": "file:///rotation_between_vectors.json"
        },
        {
            "uri": "file:///set_point_normal.json"
        },
        {
            "uri": "file:///create_mesh_sphere.json"
        },
        {
            "uri": "file:///object_terminal.json"
        },
        {
            "uri": "file:///get_geo_target_count.json"
        },
        {
            "uri": "file:///get_geo_property_check.json"
        },
        {
            "uri": "file:///volume_types.json"
        },
        {
            "uri": "file:///volume_nodedefs.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_vector.json"
        },
        {
            "uri": "file:///standard_surface_mat.json"
        },
        {
            "uri": "file:///set_strands_shape.json"
        },
        {
            "uri": "file:///generate_L_system.json"
        }
    ],
    "namespaces": [],
    "types": [],
    "compounds": [
        {
            "name": "MJCG::Graphs::L_system_example_6",
            "uriImported": "stream:/l_systemShape",
            "metadata": [
                {
                    "metaName": "io_nodes",
                    "metadata": [
                        {
                            "metaName": "io_inodes",
                            "metadata": [
                                {
                                    "metaName": "input",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "624.21 329.587"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "io_onodes",
                            "metadata": [
                                {
                                    "metaName": "output",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "io_ports"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "624.21 138.587"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Geometry::Strands,set_strands_shape"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,MJCG::Modeling::Strands,extrude_strands"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Modeling::Points,scatter_points"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,MJCG::Modeling::Strands,create_L_system"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Modeling::Instances,create_instances"
                },
                {
                    "metaName": "ViewportRect",
                    "metaType": "string",
                    "metaValue": "-1126 -673 2252 1346"
                },
                {
                    "metaName": "compoundIsGraph",
                    "metaValue": "true"
                },
                {
                    "metaName": "author",
                    "metaType": "string",
                    "metaValue": "Maxime Jeanmougin"
                },
                {
                    "metaName": "category",
                    "metaType": "string",
                    "metaValue": "MJCG"
                },
                {
                    "metaName": "description",
                    "metaType": "string",
                    "metaValue": "Generates 2D vegetation using L-system."
                },
                {
                    "metaName": "thumbnail",
                    "metaType": "string",
                    "metaValue": "L_system_example_6_thumb.png"
                }
            ],
            "ports": [],
            "compoundNodes": [
                {
                    "nodeName": "create_L_system",
                    "nodeType": "MJCG::Modeling::Growth::generate_L_system",
                    "fanInPortNames": {
                        "additional_rules": []
                    },
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::final",
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "PortExpandedState",
                            "metadata": [
                                {
                                    "metaName": "Rules",
                                    "metaType": "string",
                                    "metaValue": "1"
                                },
                                {
                                    "metaName": "Rules.Rewrite Rules",
                                    "metaType": "string",
                                    "metaValue": "1"
                                }
                            ]
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "307.365 61.8921"
                        }
                    ]
                },
                {
                    "nodeName": "value",
                    "valueType": "string",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "10 10"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "X"
                        }
                    ]
                },
                {
                    "nodeName": "value1",
                    "valueType": "string",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "10 205"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "F= 1FF2"
                        }
                    ]
                },
                {
                    "nodeName": "value2",
                    "valueType": "string",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "10 400"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "X= {F-[[X]+X]+F[+FX]-X"
                        }
                    ]
                }
            ],
            "connections": [
                {
                    "source": "value.output",
                    "target": "create_L_system.axiom"
                },
                {
                    "source": "value1.output",
                    "target": "create_L_system.rule_1"
                },
                {
                    "source": "value2.output",
                    "target": "create_L_system.rule_2"
                }
            ],
            "values": [
                {
                    "valueName": "create_L_system.length_compensation",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "create_L_system.length",
                    "valueType": "float",
                    "value": "1f"
                },
                {
                    "valueName": "create_L_system.length_scale",
                    "valueType": "float",
                    "value": "0.5f"
                },
                {
                    "valueName": "create_L_system.length_chaos",
                    "valueType": "float",
                    "value": "0f"
                },
                {
                    "valueName": "create_L_system.random_seed",
                    "valueType": "long",
                    "value": "2"
                },
                {
                    "valueName": "create_L_system.angle",
                    "valueType": "float",
                    "value": "22.5f"
                },
                {
                    "valueName": "create_L_system.angle_scale",
                    "valueType": "float",
                    "value": "0.5f"
                },
                {
                    "valueName": "create_L_system.angle_chaos",
                    "valueType": "float",
                    "value": "0f"
                },
                {
                    "valueName": "create_L_system.rule_3",
                    "valueType": "string",
                    "value": ""
                },
                {
                    "valueName": "create_L_system.rule_4",
                    "valueType": "string",
                    "value": ""
                },
                {
                    "valueName": "create_L_system.rule_5",
                    "valueType": "string",
                    "value": ""
                },
                {
                    "valueName": "create_L_system.generations",
                    "valueType": "float",
                    "value": "7f"
                },
                {
                    "valueName": "create_L_system.rotation_chaos",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "create_L_system.size",
                    "valueType": "float",
                    "value": "0.00999999978f"
                },
                {
                    "valueName": "create_L_system.size_scale",
                    "valueType": "float",
                    "value": "0.899999976f"
                },
                {
                    "valueName": "create_L_system.size_chaos",
                    "valueType": "float",
                    "value": "0f"
                },
                {
                    "valueName": "create_L_system.color_1",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0.100000001f",
                        "y": "0.25f",
                        "z": "0.100000001f"
                    }
                },
                {
                    "valueName": "create_L_system.color_2",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0.800000012f",
                        "y": "0.300000012f",
                        "z": "0.200000003f"
                    }
                },
                {
                    "valueName": "create_L_system.color_3",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "create_L_system.instance_scale",
                    "valueType": "float",
                    "value": "1f"
                },
                {
                    "valueName": "create_L_system.scale",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "1f",
                        "y": "1f",
                        "z": "1f"
                    }
                },
                {
                    "valueName": "create_L_system.rotation",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "180f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "create_L_system.translation",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "create_L_system.use_transform_matrix",
                    "valueType": "bool",
                    "value": "false"
                },
                {
                    "valueName": "create_L_system.transform",
                    "valueType": "Math::float4x4",
                    "value": {
                        "c0": {
                            "x": "1f",
                            "y": "0f",
                            "z": "0f",
                            "w": "0f"
                        },
                        "c1": {
                            "x": "0f",
                            "y": "1f",
                            "z": "0f",
                            "w": "0f"
                        },
                        "c2": {
                            "x": "0f",
                            "y": "0f",
                            "z": "1f",
                            "w": "0f"
                        },
                        "c3": {
                            "x": "0f",
                            "y": "0f",
                            "z": "0f",
                            "w": "1f"
                        }
                    }
                },
                {
                    "valueName": "value.value",
                    "valueType": "string",
                    "value": "X"
                },
                {
                    "valueName": "value1.value",
                    "valueType": "string",
                    "value": "F= 1FF2"
                },
                {
                    "valueName": "value2.value",
                    "valueType": "string",
                    "value": "X= {F-[[X]+X]+F[+FX]-X"
                }
            ],
            "reservedNodeNames": [
                {
                    "name": "output"
                },
                {
                    "name": "input"
                }
            ]
        }
    ]
}
