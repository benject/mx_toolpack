{
    "header": {
        "metadata": [
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///Math_types.json"
        },
        {
            "uri": "file:///bifrost_object_i.json"
        },
        {
            "uri": "file:///CoreArrayOps.json"
        },
        {
            "uri": "file:///bifrost_geometry_query_types.json"
        },
        {
            "uri": "file:///geometry_types.json"
        },
        {
            "uri": "file:///get_property_any.json"
        },
        {
            "uri": "file:///get_property.json"
        },
        {
            "uri": "file:///get_geo_property.json"
        },
        {
            "uri": "file:///Math_float.json"
        },
        {
            "uri": "file:///Math_double.json"
        },
        {
            "uri": "file:///riv_types.json"
        },
        {
            "uri": "file:///point_types.json"
        },
        {
            "uri": "file:///FCurve.json"
        },
        {
            "uri": "file:///riv_ops.json"
        },
        {
            "uri": "file:///Math_conversion.json"
        },
        {
            "uri": "file:///has_property.json"
        },
        {
            "uri": "file:///create_volume_geo_prop.json"
        },
        {
            "uri": "file:///is_a.json"
        },
        {
            "uri": "file:///create_object_from_schema.json"
        },
        {
            "uri": "file:///is_a_mesh.json"
        },
        {
            "uri": "file:///is_a_strands.json"
        },
        {
            "uri": "file:///is_a_points.json"
        },
        {
            "uri": "file:///is_a_volume.json"
        },
        {
            "uri": "file:///get_geo_schema_type.json"
        },
        {
            "uri": "file:///switch_is_a.json"
        },
        {
            "uri": "file:///get_target_component.json"
        },
        {
            "uri": "file:///create_data_geo_prop.json"
        },
        {
            "uri": "file:///set_property_any.json"
        },
        {
            "uri": "file:///set_property.json"
        },
        {
            "uri": "file:///get_geo_component_count.json"
        },
        {
            "uri": "file:///set_geo_property.array.json"
        },
        {
            "uri": "file:///set_geo_property.scalar.json"
        },
        {
            "uri": "file:///Math_long.json"
        },
        {
            "uri": "file:///Math_bool.json"
        },
        {
            "uri": "file:///Math_char.json"
        },
        {
            "uri": "file:///Math_int.json"
        },
        {
            "uri": "file:///Math_short.json"
        },
        {
            "uri": "file:///Math_uchar.json"
        },
        {
            "uri": "file:///Math_uint.json"
        },
        {
            "uri": "file:///Math_ulong.json"
        },
        {
            "uri": "file:///Math_ushort.json"
        },
        {
            "uri": "file:///Math_constants.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds_impl.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds.json"
        },
        {
            "uri": "file:///Core_Constants_default_value.json"
        },
        {
            "uri": "file:///Math_change_range.json"
        },
        {
            "uri": "file:///bias.json"
        },
        {
            "uri": "file:///add_points_to_points.json"
        },
        {
            "uri": "file:///validate_points.json"
        },
        {
            "uri": "file:///construct_points.json"
        },
        {
            "uri": "file:///processing_type.json"
        },
        {
            "uri": "file:///venation_node_type.json"
        },
        {
            "uri": "file:///Math_array.json"
        },
        {
            "uri": "file:///get_point_position.json"
        },
        {
            "uri": "file:///get_geo_property_check.json"
        },
        {
            "uri": "file:///get_sub_object.json"
        },
        {
            "uri": "file:///get_point_count.json"
        },
        {
            "uri": "file:///jotun_rand.json"
        },
        {
            "uri": "file:///increment_decrement.json"
        },
        {
            "uri": "file:///random_value.json"
        },
        {
            "uri": "file:///get_property_keys.json"
        },
        {
            "uri": "file:///is_empty.json"
        },
        {
            "uri": "file:///materials.json"
        },
        {
            "uri": "file:///erase_property.json"
        },
        {
            "uri": "file:///set_point_shape.json"
        },
        {
            "uri": "file:///set_point_size.json"
        },
        {
            "uri": "file:///set_point_length.json"
        },
        {
            "uri": "file:///int_filter.json"
        },
        {
            "uri": "file:///get_array_indices.json"
        },
        {
            "uri": "file:///get_strands_structure.json"
        },
        {
            "uri": "file:///access_offset_array.json"
        },
        {
            "uri": "file:///update_point_strand_index.json"
        },
        {
            "uri": "file:///check_point_strand_index.json"
        },
        {
            "uri": "file:///update_strands_ratio.json"
        },
        {
            "uri": "file:///set_sub_object_property.json"
        },
        {
            "uri": "file:///validate_strands.json"
        },
        {
            "uri": "file:///construct_strands.json"
        },
        {
            "uri": "file:///find_all_in_array.json"
        },
        {
            "uri": "file:///remove_first_in_array.json"
        },
        {
            "uri": "file:///Core_Array_flatten_nested_array.json"
        },
        {
            "uri": "file:///set_strands_shape.json"
        },
        {
            "uri": "file:///Math_lerp_with_clamp.json"
        },
        {
            "uri": "file:///Core_Array_slice_array.json"
        },
        {
            "uri": "file:///Core_Array_empty_array.json"
        },
        {
            "uri": "file:///Core_Array_array_is_empty.json"
        },
        {
            "uri": "file:///sort_array_and_remove_duplicates.json"
        },
        {
            "uri": "file:///object_terminal.json"
        },
        {
            "uri": "file:///delete_points_in_points.json"
        },
        {
            "uri": "file:///Math_axis_angle_to_quaternion.json"
        },
        {
            "uri": "file:///Math_degrees_to_radians.json"
        },
        {
            "uri": "file:///Math_multiply_quaternions.json"
        },
        {
            "uri": "file:///Math_rotate_by_quaternion.json"
        },
        {
            "uri": "file:///build_closest_accelerator.json"
        },
        {
            "uri": "file:///sample_closest_point_accelerator.json"
        },
        {
            "uri": "file:///simulation_types.json"
        },
        {
            "uri": "file:///simulation_nodedefs.json"
        },
        {
            "uri": "file:///fluids_types.json"
        },
        {
            "uri": "file:///volume_types.json"
        },
        {
            "uri": "file:///fluids_nodedefs.json"
        },
        {
            "uri": "file:///venation_branch_type.json"
        },
        {
            "uri": "file:///generate_venation_core.json"
        },
        {
            "uri": "file:///get_geo_target_count.json"
        },
        {
            "uri": "file:///CoreStringOps.json"
        },
        {
            "uri": "file:///volume_nodedefs.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_scalar.json"
        },
        {
            "uri": "file:///Profiler.json"
        },
        {
            "uri": "file:///object_profiler.json"
        },
        {
            "uri": "file:///check_point_ratio.json"
        },
        {
            "uri": "file:///set_strands_size_profile.json"
        },
        {
            "uri": "file:///cumulative_sum_array.json"
        },
        {
            "uri": "file:///get_strands_end_points.json"
        },
        {
            "uri": "file:///set_strand_length.json"
        },
        {
            "uri": "file:///sample_closest_in_radius_accelerator.json"
        },
        {
            "uri": "file:///get_points_in_radius.json"
        },
        {
            "uri": "file:///generate_venation.json"
        },
        {
            "uri": "file:///validate_mesh.json"
        },
        {
            "uri": "file:///construct_mesh.json"
        },
        {
            "uri": "file:///Core_Array_reverse_array.json"
        },
        {
            "uri": "file:///half_of.json"
        },
        {
            "uri": "file:///Math_quaternion_to_matrix.json"
        },
        {
            "uri": "file:///Math_compose_transform_matrix.json"
        },
        {
            "uri": "file:///Math_length_squared.json"
        },
        {
            "uri": "file:///Math_almost_equal.json"
        },
        {
            "uri": "file:///Math_vector3_to_vector4.json"
        },
        {
            "uri": "file:///rotation_between_vectors.json"
        },
        {
            "uri": "file:///Math_vector4_to_vector3.json"
        },
        {
            "uri": "file:///create_mesh_plane.json"
        },
        {
            "uri": "file:///scatter_types.json"
        },
        {
            "uri": "file:///get_indexer_element.json"
        },
        {
            "uri": "file:///math_util.json"
        },
        {
            "uri": "file:///get_loc_element.json"
        },
        {
            "uri": "file:///invalid_index.json"
        },
        {
            "uri": "file:///get_mesh_geo_loc_data.json"
        },
        {
            "uri": "file:///max_weight.json"
        },
        {
            "uri": "file:///mesh_v_interp.json"
        },
        {
            "uri": "file:///is_a_range_geo_property.json"
        },
        {
            "uri": "file:///get_range_geo_property.json"
        },
        {
            "uri": "file:///mesh_fv_interp.json"
        },
        {
            "uri": "file:///mesh_f_interp.json"
        },
        {
            "uri": "file:///choose_mesh_values.json"
        },
        {
            "uri": "file:///get_mesh_structure.json"
        },
        {
            "uri": "file:///get_point_geo_loc_data.json"
        },
        {
            "uri": "file:///point_p_interp.json"
        },
        {
            "uri": "file:///sample_volume_property.json"
        },
        {
            "uri": "file:///get_strand_geo_loc_data.json"
        },
        {
            "uri": "file:///strand_p_interp.json"
        },
        {
            "uri": "file:///strand_s_interp.json"
        },
        {
            "uri": "file:///choose_strand_values.json"
        },
        {
            "uri": "file:///sample_property.json"
        },
        {
            "uri": "file:///Math_matrix_to_quaternion.json"
        },
        {
            "uri": "file:///normal_and_tangent_to_orientation.json"
        },
        {
            "uri": "file:///interpret_auto_port_as_vector.json"
        },
        {
            "uri": "file:///rotate_points.json"
        },
        {
            "uri": "file:///Math_quaternion_to_axis_angle.json"
        },
        {
            "uri": "file:///set_geo_property_data.json"
        },
        {
            "uri": "file:///get_point_normal.json"
        },
        {
            "uri": "file:///get_closest_point.json"
        },
        {
            "uri": "file:///sample_interpreted_auto_port_as_vector.json"
        },
        {
            "uri": "file:///update_mesh_normals.json"
        },
        {
            "uri": "file:///get_indexed_geo_property_check.json"
        },
        {
            "uri": "file:///UV_set_name.json"
        },
        {
            "uri": "file:///UV_type_filter.json"
        },
        {
            "uri": "file:///UV_type_converter.json"
        },
        {
            "uri": "file:///get_mesh_UVs.json"
        },
        {
            "uri": "file:///project_vector.json"
        },
        {
            "uri": "file:///orient_points_by_geometry.json"
        },
        {
            "uri": "file:///generate_sample_locations.json"
        },
        {
            "uri": "file:///get_max_index.json"
        },
        {
            "uri": "file:///scatter_points_internal.json"
        },
        {
            "uri": "file:///sample_closest_accelerator.json"
        },
        {
            "uri": "file:///get_closest_locations.json"
        },
        {
            "uri": "file:///Core_Array_sum_array_impl.json"
        },
        {
            "uri": "file:///Core_Array_sum_array.json"
        },
        {
            "uri": "file:///sample_interpreted_auto_port_as_scalar.json"
        },
        {
            "uri": "file:///set_point_position.json"
        },
        {
            "uri": "file:///weighted_sample_elimination.json"
        },
        {
            "uri": "file:///scatter_points_blue_noise.json"
        },
        {
            "uri": "file:///mask_and_number_interaction.json"
        },
        {
            "uri": "file:///compute_mesh_surface_area.json"
        },
        {
            "uri": "file:///scatter_points_on_mesh.json"
        },
        {
            "uri": "file:///twice_of.json"
        },
        {
            "uri": "file:///compute_bounding_sphere.json"
        },
        {
            "uri": "file:///delete_points.json"
        },
        {
            "uri": "file:///cull_overlapping_positions.json"
        },
        {
            "uri": "file:///merge_meshes.json"
        },
        {
            "uri": "file:///merge_points.json"
        },
        {
            "uri": "file:///merge_strands.json"
        },
        {
            "uri": "file:///merge_geometry.json"
        },
        {
            "uri": "file:///cull_overlapping_points.json"
        },
        {
            "uri": "file:///cull_points.json"
        },
        {
            "uri": "file:///density_to_radius.json"
        },
        {
            "uri": "file:///get_volume_tile_info.json"
        },
        {
            "uri": "file:///scatter_points.json"
        },
        {
            "uri": "file:///compute_on_frame.json"
        }
    ],
    "namespaces": [],
    "types": [],
    "compounds": [
        {
            "name": "MJCG::Graphs::venation_plane",
            "uriImported": "file:///__duplicateCompoundURIHelper__",
            "metadata": [
                {
                    "metaName": "io_nodes",
                    "metadata": [
                        {
                            "metaName": "io_inodes",
                            "metadata": [
                                {
                                    "metaName": "input",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "-1249.52 886.746"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "io_onodes",
                            "metadata": [
                                {
                                    "metaName": "output",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "759.074 615.169"
                                        },
                                        {
                                            "metaName": "io_ports",
                                            "metadata": [
                                                {
                                                    "metaName": "out_strands"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "metaName": "backdrop",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d4949"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "linear interpolate between color 1 & 2 based on the strand level"
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "449.689 538.269 553.877 343.242"
                        }
                    ]
                },
                {
                    "metaName": "backdrop1",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#4b6d51"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Grow veins toward points generated on the plane. (scatter graph.)"
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "32.1261 533.281 353.054 399.081"
                        }
                    ]
                },
                {
                    "metaName": "backdrop2",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#504b6d"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Construct a points object using two positions. These points will be the seeds from where the veins will grow."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-616.076 752.559 600.403 338.561"
                        }
                    ]
                },
                {
                    "metaName": "backdrop3",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d4444"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Scatter points on a plane."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-1246.78 456.352 597.76 403.803"
                        }
                    ]
                },
                {
                    "metaName": "backdrop4",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6b6d4a"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "cache the scattered points so the simulation demo is faster.\nThe scatter is only evaluated on the frame 1."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-466.19 423.202 342.648 289.161"
                        }
                    ]
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Simulation::Common,compute_on_frame"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,MJCG::Modeling::Growth,generate_venation"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Array,get_array_indices"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Iterators,for_each"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Core::Array,sequence_array"
                },
                {
                    "metaName": "ViewportRect",
                    "metaType": "string",
                    "metaValue": "-1329.33 21.0005 2394.21 1503.08"
                },
                {
                    "metaName": "compoundIsGraph",
                    "metaValue": "true"
                },
                {
                    "metaName": "author",
                    "metaType": "string",
                    "metaValue": "Maxime Jeanmougin"
                },
                {
                    "metaName": "category",
                    "metaType": "string",
                    "metaValue": "MJCG"
                },
                {
                    "metaName": "description",
                    "metaType": "string",
                    "metaValue": "Grow veins by colonizing points scattered on a plane."
                },
                {
                    "metaName": "example_scene",
                    "metaType": "string",
                    "metaValue": "venation_plane_example.ma"
                },
                {
                    "metaName": "thumbnail",
                    "metaType": "string",
                    "metaValue": "venation_plane_thumb.png"
                }
            ],
            "ports": [
                {
                    "portName": "out_strands",
                    "portDirection": "output",
                    "portType": "Amino::Object"
                }
            ],
            "compounds": [
                {
                    "name": "set_color_from_strand_level",
                    "uriImported": "file:///__duplicateCompoundURIHelper__",
                    "metadata": [
                        {
                            "metaName": "io_nodes",
                            "metadata": [
                                {
                                    "metaName": "io_inodes",
                                    "metadata": [
                                        {
                                            "metaName": "input",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "-828.207 39.3344"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "strands"
                                                        },
                                                        {
                                                            "metaName": "color_1"
                                                        },
                                                        {
                                                            "metaName": "color_2"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "metaName": "io_onodes",
                                    "metadata": [
                                        {
                                            "metaName": "output",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "1511.63 91.0026"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "out_strands"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Graph,terminal"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,MJCG::Modeling::Strands,create_plexus"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Simulation::Particles,simulate_particles"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Properties,set_geo_property"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Properties,get_geo_property"
                        },
                        {
                            "metaName": "ViewportRect",
                            "metaType": "string",
                            "metaValue": "-908 -531.189 2726 1711.38"
                        }
                    ],
                    "ports": [
                        {
                            "portName": "strands",
                            "portDirection": "input",
                            "portType": "Amino::Object"
                        },
                        {
                            "portName": "color_1",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        },
                        {
                            "portName": "color_2",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        },
                        {
                            "portName": "out_strands",
                            "portDirection": "output",
                            "portType": "Amino::Object"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "get_geo_property",
                            "nodeType": "Geometry::Properties::get_geo_property",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-466.348 275.382"
                                }
                            ]
                        },
                        {
                            "nodeName": "lerp",
                            "nodeType": "Core::Math::lerp",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "967.003 143.589"
                                }
                            ]
                        },
                        {
                            "nodeName": "set_geo_property",
                            "nodeType": "Geometry::Properties::set_geo_property",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1230 22"
                                }
                            ]
                        },
                        {
                            "nodeName": "array_bounds",
                            "nodeType": "Core::Array::array_bounds",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "103.345 427.06"
                                }
                            ]
                        },
                        {
                            "nodeName": "change_range",
                            "nodeType": "Core::Math::change_range",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "408.345 290.969"
                                }
                            ]
                        },
                        {
                            "nodeName": "to_float",
                            "nodeType": "Core::Type_Conversion::to_float",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-165.174 318.292"
                                }
                            ]
                        },
                        {
                            "nodeName": "bias",
                            "nodeType": "MJCG::Core::Math::bias",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "684.991 310.033"
                                }
                            ]
                        }
                    ],
                    "connections": [
                        {
                            "source": ".strands",
                            "target": "get_geo_property.geometry"
                        },
                        {
                            "source": ".color_1",
                            "target": "lerp.first"
                        },
                        {
                            "source": ".color_2",
                            "target": "lerp.second"
                        },
                        {
                            "source": "lerp.interpolated",
                            "target": "set_geo_property.data"
                        },
                        {
                            "source": "set_geo_property.out_geometry",
                            "target": ".out_strands"
                        },
                        {
                            "source": ".strands",
                            "target": "set_geo_property.geometry"
                        },
                        {
                            "source": "to_float.float",
                            "target": "array_bounds.array"
                        },
                        {
                            "source": "to_float.float",
                            "target": "change_range.value"
                        },
                        {
                            "source": "array_bounds.min_bound",
                            "target": "change_range.from_start"
                        },
                        {
                            "source": "array_bounds.max_bound",
                            "target": "change_range.from_end"
                        },
                        {
                            "source": "change_range.result",
                            "target": "bias.value"
                        },
                        {
                            "source": "get_geo_property.data",
                            "target": "to_float.from"
                        },
                        {
                            "source": "bias.output",
                            "target": "lerp.fraction"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "get_geo_property.property",
                            "valueType": "string",
                            "value": "point_strand_level"
                        },
                        {
                            "valueName": "get_geo_property.type",
                            "valueType": "array<uint>",
                            "value": []
                        },
                        {
                            "valueName": "lerp.first",
                            "valueType": "Math::float3",
                            "value": {
                                "x": "1f",
                                "y": "0f",
                                "z": "0f"
                            }
                        },
                        {
                            "valueName": "lerp.second",
                            "valueType": "Math::float3",
                            "value": {
                                "x": "0f",
                                "y": "0f",
                                "z": "1f"
                            }
                        },
                        {
                            "valueName": "set_geo_property.property",
                            "valueType": "string",
                            "value": "color"
                        },
                        {
                            "valueName": "set_geo_property.target",
                            "valueType": "string",
                            "value": "point_component"
                        },
                        {
                            "valueName": "change_range.to_start",
                            "valueType": "float",
                            "value": "0f"
                        },
                        {
                            "valueName": "change_range.to_end",
                            "valueType": "float",
                            "value": "1f"
                        },
                        {
                            "valueName": "change_range.clamp",
                            "valueType": "bool",
                            "value": "true"
                        },
                        {
                            "valueName": "bias.bias",
                            "valueType": "float",
                            "value": "0.75f"
                        }
                    ],
                    "reservedNodeNames": [
                        {
                            "name": "input"
                        },
                        {
                            "name": "output"
                        }
                    ]
                }
            ],
            "compoundNodes": [
                {
                    "nodeName": "value",
                    "valueType": "Math::float3",
                    "metadata": [
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-595.347 793.097"
                        },
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "-5"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        }
                    ]
                },
                {
                    "nodeName": "value1",
                    "valueType": "Math::float3",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-594.975 934.874"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "5"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        },
                        {
                            "metaName": "valuenode_defaultvalue",
                            "metaType": "string",
                            "metaValue": "0"
                        }
                    ]
                },
                {
                    "nodeName": "set_color_from_strand_level",
                    "nodeType": "set_color_from_strand_level",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "503.929 582.065"
                        }
                    ]
                },
                {
                    "nodeName": "construct_points",
                    "nodeType": "Geometry::Points::construct_points",
                    "fanInPortNames": {
                        "point_position": [
                            "output",
                            "output1"
                        ]
                    },
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-317.939 854.454"
                        }
                    ]
                },
                {
                    "nodeName": "generate_venation",
                    "nodeType": "MJCG::Modeling::Growth::generate_venation",
                    "deactivatedTerminals": [
                        "Core::Graph::terminal::final",
                        "Core::Graph::terminal::proxy",
                        "Core::Graph::terminal::diagnostic"
                    ],
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "104.056 578.413"
                        }
                    ]
                },
                {
                    "nodeName": "create_mesh_plane",
                    "nodeType": "Modeling::Primitive::create_mesh_plane",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1234.02 581.492"
                        }
                    ]
                },
                {
                    "nodeName": "scatter_points",
                    "nodeType": "Modeling::Points::scatter_points",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-930.086 510.461"
                        }
                    ]
                },
                {
                    "nodeName": "compute_on_frame",
                    "nodeType": "Simulation::Common::compute_on_frame",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-417.225 487.025"
                        }
                    ]
                }
            ],
            "connections": [
                {
                    "source": "value.output",
                    "target": "construct_points.point_position.output"
                },
                {
                    "source": "generate_venation.strands",
                    "target": "set_color_from_strand_level.strands"
                },
                {
                    "source": "construct_points.points",
                    "target": "generate_venation.seed_points"
                },
                {
                    "source": "value1.output",
                    "target": "construct_points.point_position.output1"
                },
                {
                    "source": "set_color_from_strand_level.out_strands",
                    "target": ".out_strands"
                },
                {
                    "source": "create_mesh_plane.plane_mesh",
                    "target": "scatter_points.geometry"
                },
                {
                    "source": "scatter_points.points",
                    "target": "compute_on_frame.value_to_pull"
                },
                {
                    "source": "compute_on_frame.cached_value",
                    "target": "generate_venation.attractor_points"
                }
            ],
            "values": [
                {
                    "valueName": "value.value",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "-5f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "value1.value",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "5f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "set_color_from_strand_level.strands",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "set_color_from_strand_level.color_1",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "1f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "set_color_from_strand_level.color_2",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "1f"
                    }
                },
                {
                    "valueName": "generate_venation.min_step_length",
                    "valueType": "float",
                    "value": "0.150000006f"
                },
                {
                    "valueName": "generate_venation.max_step_length",
                    "valueType": "float",
                    "value": "0.200000003f"
                },
                {
                    "valueName": "generate_venation.clamp_step_angle",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "generate_venation.max_step_angle",
                    "valueType": "float",
                    "value": "5f"
                },
                {
                    "valueName": "generate_venation.min_branch_angle",
                    "valueType": "float",
                    "value": "0f"
                },
                {
                    "valueName": "generate_venation.max_branch_angle",
                    "valueType": "float",
                    "value": "20f"
                },
                {
                    "valueName": "create_mesh_plane.length",
                    "valueType": "float",
                    "value": "37f"
                },
                {
                    "valueName": "create_mesh_plane.width",
                    "valueType": "float",
                    "value": "37f"
                },
                {
                    "valueName": "create_mesh_plane.length_segments",
                    "valueType": "int",
                    "value": "1L"
                },
                {
                    "valueName": "create_mesh_plane.width_segments",
                    "valueType": "int",
                    "value": "1L"
                },
                {
                    "valueName": "create_mesh_plane.up_axis",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "1f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "create_mesh_plane.position",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "scatter_points.geometry",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "scatter_points.scatter_mode",
                    "valueType": "Modeling::Points::ScatteringMode",
                    "value": "BlueNoiseMaximal"
                },
                {
                    "valueName": "scatter_points.amount_mode",
                    "valueType": "Modeling::Points::AmountMode",
                    "value": "Number"
                },
                {
                    "valueName": "scatter_points.amount",
                    "valueType": "float",
                    "value": "4000f"
                },
                {
                    "valueName": "scatter_points.density_weights_mode",
                    "valueType": "Modeling::Points::DensityWeightsMode",
                    "value": "Random"
                },
                {
                    "valueName": "scatter_points.cull_overlapping",
                    "valueType": "bool",
                    "value": "false"
                },
                {
                    "valueName": "scatter_points.overlapping_radius",
                    "valueType": "float",
                    "value": "0.100000001f"
                },
                {
                    "valueName": "scatter_points.transfer_properties",
                    "valueType": "string",
                    "value": "point_normal"
                },
                {
                    "valueName": "scatter_points.set_emit_location",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points.set_orientations_from_geometry",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points.normal_mode",
                    "valueType": "Modeling::Points::OrientPointsNormalMode",
                    "value": "point_normal"
                },
                {
                    "valueName": "scatter_points.tangent_mode",
                    "valueType": "Modeling::Points::OrientPointsTangentMode",
                    "value": "UV"
                },
                {
                    "valueName": "scatter_points.prioritize_normal",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "scatter_points.seed",
                    "valueType": "long",
                    "value": "0"
                },
                {
                    "valueName": "scatter_points.max_number",
                    "valueType": "long",
                    "value": "1000000"
                }
            ],
            "reservedNodeNames": [
                {
                    "name": "output"
                },
                {
                    "name": "input"
                }
            ]
        }
    ]
}