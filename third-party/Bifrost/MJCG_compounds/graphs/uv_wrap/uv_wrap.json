{
    "header": {
        "metadata": [
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///Math_types.json"
        },
        {
            "uri": "file:///bifrost_object_i.json"
        },
        {
            "uri": "file:///Math_conversion.json"
        },
        {
            "uri": "file:///bifrost_geometry_query_types.json"
        },
        {
            "uri": "file:///geometry_types.json"
        },
        {
            "uri": "file:///has_property.json"
        },
        {
            "uri": "file:///get_property_any.json"
        },
        {
            "uri": "file:///get_property.json"
        },
        {
            "uri": "file:///create_volume_geo_prop.json"
        },
        {
            "uri": "file:///is_a.json"
        },
        {
            "uri": "file:///create_object_from_schema.json"
        },
        {
            "uri": "file:///is_a_mesh.json"
        },
        {
            "uri": "file:///is_a_strands.json"
        },
        {
            "uri": "file:///is_a_points.json"
        },
        {
            "uri": "file:///is_a_volume.json"
        },
        {
            "uri": "file:///get_geo_schema_type.json"
        },
        {
            "uri": "file:///switch_is_a.json"
        },
        {
            "uri": "file:///get_target_component.json"
        },
        {
            "uri": "file:///create_data_geo_prop.json"
        },
        {
            "uri": "file:///set_property_any.json"
        },
        {
            "uri": "file:///set_property.json"
        },
        {
            "uri": "file:///get_geo_component_count.json"
        },
        {
            "uri": "file:///set_geo_property.array.json"
        },
        {
            "uri": "file:///set_geo_property.scalar.json"
        },
        {
            "uri": "file:///CoreArrayOps.json"
        },
        {
            "uri": "file:///get_geo_property.json"
        },
        {
            "uri": "file:///get_strands_structure.json"
        },
        {
            "uri": "file:///Math_long.json"
        },
        {
            "uri": "file:///Math_float.json"
        },
        {
            "uri": "file:///Math_double.json"
        },
        {
            "uri": "file:///Math_char.json"
        },
        {
            "uri": "file:///Math_int.json"
        },
        {
            "uri": "file:///Math_short.json"
        },
        {
            "uri": "file:///Math_uchar.json"
        },
        {
            "uri": "file:///Math_uint.json"
        },
        {
            "uri": "file:///Math_ulong.json"
        },
        {
            "uri": "file:///Math_ushort.json"
        },
        {
            "uri": "file:///Math_array.json"
        },
        {
            "uri": "file:///Core_Constants_default_value.json"
        },
        {
            "uri": "file:///int_filter.json"
        },
        {
            "uri": "file:///riv_types.json"
        },
        {
            "uri": "file:///point_types.json"
        },
        {
            "uri": "file:///FCurve.json"
        },
        {
            "uri": "file:///riv_ops.json"
        },
        {
            "uri": "file:///get_array_indices.json"
        },
        {
            "uri": "file:///access_offset_array.json"
        },
        {
            "uri": "file:///get_geo_property_check.json"
        },
        {
            "uri": "file:///update_point_strand_index.json"
        },
        {
            "uri": "file:///check_point_strand_index.json"
        },
        {
            "uri": "file:///update_strands_ratio.json"
        },
        {
            "uri": "file:///Math_bool.json"
        },
        {
            "uri": "file:///Math_change_range.json"
        },
        {
            "uri": "file:///Math_constants.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds_impl.json"
        },
        {
            "uri": "file:///Core_Array_array_bounds.json"
        },
        {
            "uri": "file:///get_point_position.json"
        },
        {
            "uri": "file:///Math_multiply_quaternions.json"
        },
        {
            "uri": "file:///Math_rotate_by_quaternion.json"
        },
        {
            "uri": "file:///set_point_position.json"
        },
        {
            "uri": "file:///Math_euler_to_quaternion.json"
        },
        {
            "uri": "file:///Math_degrees_to_radians.json"
        },
        {
            "uri": "file:///fluids_types.json"
        },
        {
            "uri": "file:///volume_types.json"
        },
        {
            "uri": "file:///fluids_nodedefs.json"
        },
        {
            "uri": "file:///set_sub_object_property.json"
        },
        {
            "uri": "file:///validate_strands.json"
        },
        {
            "uri": "file:///construct_strands.json"
        },
        {
            "uri": "file:///get_sub_object.json"
        },
        {
            "uri": "file:///get_point_count.json"
        },
        {
            "uri": "file:///sample_closest_accelerator.json"
        },
        {
            "uri": "file:///Math_lerp_with_clamp.json"
        },
        {
            "uri": "file:///get_indexer_element.json"
        },
        {
            "uri": "file:///math_util.json"
        },
        {
            "uri": "file:///get_loc_element.json"
        },
        {
            "uri": "file:///invalid_index.json"
        },
        {
            "uri": "file:///get_mesh_geo_loc_data.json"
        },
        {
            "uri": "file:///max_weight.json"
        },
        {
            "uri": "file:///mesh_v_interp.json"
        },
        {
            "uri": "file:///is_a_range_geo_property.json"
        },
        {
            "uri": "file:///get_range_geo_property.json"
        },
        {
            "uri": "file:///mesh_fv_interp.json"
        },
        {
            "uri": "file:///mesh_f_interp.json"
        },
        {
            "uri": "file:///Core_Array_empty_array.json"
        },
        {
            "uri": "file:///choose_mesh_values.json"
        },
        {
            "uri": "file:///get_mesh_structure.json"
        },
        {
            "uri": "file:///get_point_geo_loc_data.json"
        },
        {
            "uri": "file:///point_p_interp.json"
        },
        {
            "uri": "file:///sample_volume_property.json"
        },
        {
            "uri": "file:///get_strand_geo_loc_data.json"
        },
        {
            "uri": "file:///strand_p_interp.json"
        },
        {
            "uri": "file:///strand_s_interp.json"
        },
        {
            "uri": "file:///choose_strand_values.json"
        },
        {
            "uri": "file:///sample_property.json"
        },
        {
            "uri": "file:///Math_matrix_to_quaternion.json"
        },
        {
            "uri": "file:///Math_length_squared.json"
        },
        {
            "uri": "file:///Math_quaternion_invert.json"
        },
        {
            "uri": "file:///build_closest_accelerator.json"
        },
        {
            "uri": "file:///get_point_normal.json"
        },
        {
            "uri": "file:///set_geo_property_data.json"
        },
        {
            "uri": "file:///Core_Array_slice_array.json"
        },
        {
            "uri": "file:///erase_property.json"
        },
        {
            "uri": "file:///update_mesh_normals.json"
        },
        {
            "uri": "file:///validate_mesh.json"
        },
        {
            "uri": "file:///construct_mesh.json"
        },
        {
            "uri": "file:///Math_quaternion_to_matrix.json"
        },
        {
            "uri": "file:///Math_compose_transform_matrix.json"
        },
        {
            "uri": "file:///Math_vector3_to_vector4.json"
        },
        {
            "uri": "file:///Math_vector4_to_vector3.json"
        },
        {
            "uri": "file:///multiply_vector_by_matrix.json"
        },
        {
            "uri": "file:///get_closest_locations.json"
        },
        {
            "uri": "file:///CoreStringOps.json"
        },
        {
            "uri": "file:///get_indexed_geo_property_check.json"
        },
        {
            "uri": "file:///UV_set_name.json"
        },
        {
            "uri": "file:///UV_type_filter.json"
        },
        {
            "uri": "file:///UV_type_converter.json"
        },
        {
            "uri": "file:///get_mesh_UVs.json"
        },
        {
            "uri": "file:///sample_mesh_UVs.json"
        },
        {
            "uri": "file:///object_terminal.json"
        },
        {
            "uri": "file:///sample_closest_point_accelerator.json"
        },
        {
            "uri": "file:///get_closest_point.json"
        },
        {
            "uri": "file:///Core_Array_array_is_empty.json"
        },
        {
            "uri": "file:///sort_array_and_remove_duplicates.json"
        },
        {
            "uri": "file:///update_strands_tangents.json"
        },
        {
            "uri": "file:///half_of.json"
        },
        {
            "uri": "file:///Core_Array_sum_array_impl.json"
        },
        {
            "uri": "file:///Core_Array_sum_array.json"
        },
        {
            "uri": "file:///Core_Array_flatten_nested_array.json"
        },
        {
            "uri": "file:///compute_mesh_surface_area.json"
        },
        {
            "uri": "file:///increment_decrement.json"
        },
        {
            "uri": "file:///update_point_neighbors.json"
        },
        {
            "uri": "file:///update_face_tangent.json"
        },
        {
            "uri": "file:///noise_nodedefs.json"
        },
        {
            "uri": "file:///fractal_turbulence.json"
        },
        {
            "uri": "file:///create_mesh_from_uv.json"
        },
        {
            "uri": "file:///uv_wrap_deformer.json"
        },
        {
            "uri": "file:///get_property_keys.json"
        },
        {
            "uri": "file:///is_empty.json"
        },
        {
            "uri": "file:///materials.json"
        },
        {
            "uri": "file:///set_strands_shape.json"
        }
    ],
    "namespaces": [],
    "types": [],
    "compounds": [
        {
            "name": "MJCG::Graphs::uv_wrap",
            "uriImported": "stream:/stream",
            "metadata": [
                {
                    "metaName": "io_nodes",
                    "metadata": [
                        {
                            "metaName": "io_inodes",
                            "metadata": [
                                {
                                    "metaName": "pTorusShape1",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "io_ports",
                                            "metadata": [
                                                {
                                                    "metaName": "mesh"
                                                }
                                            ]
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "-1175.61 650.38"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "io_onodes",
                            "metadata": [
                                {
                                    "metaName": "output1",
                                    "metadata": [
                                        {
                                            "metaName": "DisplayMode",
                                            "metaType": "string",
                                            "metaValue": "2"
                                        },
                                        {
                                            "metaName": "io_ports",
                                            "metadata": [
                                                {
                                                    "metaName": "out_strands"
                                                }
                                            ]
                                        },
                                        {
                                            "metaName": "LayoutPos",
                                            "metaType": "string",
                                            "metaValue": "-1480.4 633.025"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "metaName": "backdrop",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#4f6d46"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "Create the simple knit strands, add some colors, set the render settings. \nWe also transform the strands so that they are placed in from of the UV mesh."
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-2491.47 459.524 1253.14 438.828"
                        }
                    ]
                },
                {
                    "metaName": "backdrop1",
                    "metadata": [
                        {
                            "metaName": "type",
                            "metaType": "string",
                            "metaValue": "backdrop"
                        },
                        {
                            "metaName": "color",
                            "metaType": "string",
                            "metaValue": "#6d393a"
                        },
                        {
                            "metaName": "coords",
                            "metaType": "string",
                            "metaValue": "-1198.26 442.467 565.071 451.001"
                        },
                        {
                            "metaName": "text",
                            "metaType": "string",
                            "metaValue": "This deforms the input strands by transfering the wrapped positions from UV space to world space.\nThe D (diagnostic) button actually draws the UV mesh in the viewport.\nOnce your input meshes has been placed on the UV mesh, input your objects and wrap them.\n\nTHE INPUT MESH MUST HAVE UVs!"
                        }
                    ]
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Modeling::Primitive,create_mesh_sphere"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "output"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Modeling::Points,transform_points_weighted"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,MJCG::Geometry::Deformers,deform_by_uv"
                },
                {
                    "metaName": "_recentNode_",
                    "metaType": "string",
                    "metaValue": "BifrostGraph,Geometry::Properties,get_point_transform"
                },
                {
                    "metaName": "ViewportRect",
                    "metaType": "string",
                    "metaValue": "-2547.05 99.46 1948.3 1189.84"
                },
                {
                    "metaName": "compoundIsGraph",
                    "metaValue": "true"
                },
                {
                    "metaName": "author",
                    "metaType": "string",
                    "metaValue": "Maxime Jeanmougin"
                },
                {
                    "metaName": "category",
                    "metaType": "string",
                    "metaValue": "MJCG"
                },
                {
                    "metaName": "description",
                    "metaType": "string",
                    "metaValue": "Wraps the simple knit strands around an object by transfering the object's closest position from the UV mesh to the world mesh."
                },
                {
                    "metaName": "example_scene",
                    "metaType": "string",
                    "metaValue": "uv_wrap_example.ma"
                },
                {
                    "metaName": "thumbnail",
                    "metaType": "string",
                    "metaValue": "uv_wrap_thumb.png"
                }
            ],
            "ports": [
                {
                    "portName": "mesh",
                    "portDirection": "input",
                    "portType": "Amino::Object",
                    "portDefault": {},
                    "metadata": [
                        {
                            "metaName": "pathinfo",
                            "metadata": [
                                {
                                    "metaName": "path",
                                    "metaType": "string",
                                    "metaValue": "/pTorus1/pTorusShape1"
                                },
                                {
                                    "metaName": "setOperation",
                                    "metaType": "string",
                                    "metaValue": "+"
                                },
                                {
                                    "metaName": "active",
                                    "metaType": "string",
                                    "metaValue": "true"
                                }
                            ]
                        }
                    ]
                },
                {
                    "portName": "out_strands",
                    "portDirection": "output",
                    "portType": "Amino::Object"
                }
            ],
            "compounds": [
                {
                    "name": "color_by_index",
                    "uriImported": "stream:/stream",
                    "metadata": [
                        {
                            "metaName": "io_nodes",
                            "metadata": [
                                {
                                    "metaName": "io_inodes",
                                    "metadata": [
                                        {
                                            "metaName": "input",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "-1138.75 89.094"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "strands"
                                                        },
                                                        {
                                                            "metaName": "start_color"
                                                        },
                                                        {
                                                            "metaName": "mid_color"
                                                        },
                                                        {
                                                            "metaName": "end_color"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "metaName": "io_onodes",
                                    "metadata": [
                                        {
                                            "metaName": "output",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "1731.72 -69.0995"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "out_strands"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Strands::Internal,check_point_strand_index"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,lerp"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Array,array_bounds"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,change_range"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Type_Conversion,to_float"
                        },
                        {
                            "metaName": "ViewportRect",
                            "metaType": "string",
                            "metaValue": "-1219 -617.038 3257 1989.08"
                        }
                    ],
                    "ports": [
                        {
                            "portName": "strands",
                            "portDirection": "input"
                        },
                        {
                            "portName": "out_strands",
                            "portDirection": "output"
                        },
                        {
                            "portName": "start_color",
                            "portDirection": "input",
                            "portType": "Math::float4"
                        },
                        {
                            "portName": "mid_color",
                            "portDirection": "input",
                            "portType": "Math::float4"
                        },
                        {
                            "portName": "end_color",
                            "portDirection": "input",
                            "portType": "Math::float4"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "set_geo_property",
                            "nodeType": "Geometry::Properties::set_geo_property",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1424.12 -114.936"
                                }
                            ]
                        },
                        {
                            "nodeName": "get_strands_structure",
                            "nodeType": "Geometry::Strands::get_strands_structure",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-537.363 451.697"
                                }
                            ]
                        },
                        {
                            "nodeName": "update_strands_ratio",
                            "nodeType": "Geometry::Strands::Internal::update_strands_ratio",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-843.756 -95.2139"
                                }
                            ]
                        },
                        {
                            "nodeName": "to_float",
                            "nodeType": "Core::Type_Conversion::to_float",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-270.254 498.026"
                                }
                            ]
                        },
                        {
                            "nodeName": "change_range",
                            "nodeType": "Core::Math::change_range",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "261.377 474.341"
                                }
                            ]
                        },
                        {
                            "nodeName": "change_range1",
                            "nodeType": "Core::Math::change_range",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "555.607 574.001"
                                }
                            ]
                        },
                        {
                            "nodeName": "array_bounds",
                            "nodeType": "Core::Array::array_bounds",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-3.8035 590.04"
                                }
                            ]
                        },
                        {
                            "nodeName": "lerp",
                            "nodeType": "Core::Math::lerp",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "831.956 5.67274"
                                }
                            ]
                        },
                        {
                            "nodeName": "lerp1",
                            "nodeType": "Core::Math::lerp",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1140.22 127.996"
                                }
                            ]
                        },
                        {
                            "nodeName": "check_point_strand_index",
                            "nodeType": "Geometry::Strands::Internal::check_point_strand_index",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "-804.125 501.639"
                                }
                            ]
                        },
                        {
                            "nodeName": "change_range2",
                            "nodeType": "Core::Math::change_range",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "550.881 259.269"
                                }
                            ]
                        }
                    ],
                    "connections": [
                        {
                            "source": "update_strands_ratio.out_strands",
                            "target": "set_geo_property.geometry"
                        },
                        {
                            "source": ".strands",
                            "target": "update_strands_ratio.strands"
                        },
                        {
                            "source": "get_strands_structure.point_strand_index",
                            "target": "to_float.from"
                        },
                        {
                            "source": "to_float.float",
                            "target": "change_range.value"
                        },
                        {
                            "source": "to_float.float",
                            "target": "array_bounds.array"
                        },
                        {
                            "source": "array_bounds.min_bound",
                            "target": "change_range.from_start"
                        },
                        {
                            "source": "array_bounds.max_bound",
                            "target": "change_range.from_end"
                        },
                        {
                            "source": "lerp.interpolated",
                            "target": "lerp1.first"
                        },
                        {
                            "source": ".start_color",
                            "target": "lerp.first"
                        },
                        {
                            "source": ".mid_color",
                            "target": "lerp.second"
                        },
                        {
                            "source": ".end_color",
                            "target": "lerp1.second"
                        },
                        {
                            "source": "change_range1.result",
                            "target": "lerp1.fraction"
                        },
                        {
                            "source": "lerp1.interpolated",
                            "target": "set_geo_property.data"
                        },
                        {
                            "source": ".strands",
                            "target": "check_point_strand_index.strands"
                        },
                        {
                            "source": "check_point_strand_index.out_strands",
                            "target": "get_strands_structure.strands"
                        },
                        {
                            "source": "change_range.result",
                            "target": "change_range2.value"
                        },
                        {
                            "source": "change_range2.result",
                            "target": "lerp.fraction"
                        },
                        {
                            "source": "change_range.result",
                            "target": "change_range1.value"
                        },
                        {
                            "source": "set_geo_property.out_geometry",
                            "target": ".out_strands"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "set_geo_property.property",
                            "valueType": "string",
                            "value": "color"
                        },
                        {
                            "valueName": "set_geo_property.default",
                            "valueType": "Math::float4",
                            "value": {
                                "x": "0f",
                                "y": "0f",
                                "z": "0f",
                                "w": "1f"
                            }
                        },
                        {
                            "valueName": "set_geo_property.target",
                            "valueType": "string",
                            "value": "point_component"
                        },
                        {
                            "valueName": "change_range.to_end",
                            "valueType": "float",
                            "value": "1f"
                        },
                        {
                            "valueName": "change_range1.from_start",
                            "valueType": "float",
                            "value": "0.5f"
                        },
                        {
                            "valueName": "change_range1.from_end",
                            "valueType": "float",
                            "value": "1f"
                        },
                        {
                            "valueName": "change_range1.to_start",
                            "valueType": "float",
                            "value": "0f"
                        },
                        {
                            "valueName": "change_range1.to_end",
                            "valueType": "float",
                            "value": "1f"
                        },
                        {
                            "valueName": "change_range1.clamp",
                            "valueType": "bool",
                            "value": "false"
                        },
                        {
                            "valueName": "change_range2.from_end",
                            "valueType": "float",
                            "value": "0.5f"
                        },
                        {
                            "valueName": "change_range2.to_end",
                            "valueType": "float",
                            "value": "1f"
                        },
                        {
                            "valueName": "change_range2.clamp",
                            "valueType": "bool",
                            "value": "false"
                        }
                    ],
                    "reservedNodeNames": [
                        {
                            "name": "input"
                        },
                        {
                            "name": "output"
                        }
                    ]
                },
                {
                    "name": "transform_strands",
                    "uriImported": "stream:/stream",
                    "metadata": [
                        {
                            "metaName": "io_nodes",
                            "metadata": [
                                {
                                    "metaName": "io_inodes",
                                    "metadata": [
                                        {
                                            "metaName": "input",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "10 182"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "strands"
                                                        },
                                                        {
                                                            "metaName": "rotate"
                                                        },
                                                        {
                                                            "metaName": "translate"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "metaName": "io_onodes",
                                    "metadata": [
                                        {
                                            "metaName": "output",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "1840 43"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "out_strands"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,add"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Conversion,degrees_to_radians"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,euler_to_quaternion"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,rotate_by_quaternion"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Properties,set_point_position"
                        },
                        {
                            "metaName": "ViewportRect",
                            "metaType": "string",
                            "metaValue": "-70 -468.664 2216 1353.33"
                        }
                    ],
                    "ports": [
                        {
                            "portName": "strands",
                            "portDirection": "input",
                            "portType": "Amino::Object"
                        },
                        {
                            "portName": "out_strands",
                            "portDirection": "output",
                            "portType": "Amino::Object"
                        },
                        {
                            "portName": "rotate",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        },
                        {
                            "portName": "translate",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "get_point_position",
                            "nodeType": "Geometry::Properties::get_point_position",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "620 10"
                                }
                            ]
                        },
                        {
                            "nodeName": "rotate_by_quaternion",
                            "nodeType": "Core::Math::rotate_by_quaternion",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "925 76"
                                }
                            ]
                        },
                        {
                            "nodeName": "set_point_position",
                            "nodeType": "Geometry::Properties::set_point_position",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1535 43"
                                }
                            ]
                        },
                        {
                            "nodeName": "euler_to_quaternion",
                            "nodeType": "Core::Math::euler_to_quaternion",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "620 205"
                                }
                            ]
                        },
                        {
                            "nodeName": "degrees_to_radians",
                            "nodeType": "Core::Conversion::degrees_to_radians",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "315 151"
                                }
                            ]
                        },
                        {
                            "nodeName": "add",
                            "nodeType": "Core::Math::add",
                            "multiInPortNames": [
                                "rotated_vector",
                                "port"
                            ],
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1230 126"
                                }
                            ]
                        }
                    ],
                    "connections": [
                        {
                            "source": ".strands",
                            "target": "get_point_position.geometry"
                        },
                        {
                            "source": "get_point_position.point_position",
                            "target": "rotate_by_quaternion.vector"
                        },
                        {
                            "source": ".strands",
                            "target": "set_point_position.geometry"
                        },
                        {
                            "source": "set_point_position.out_geometry",
                            "target": ".out_strands"
                        },
                        {
                            "source": "degrees_to_radians.radians",
                            "target": "euler_to_quaternion.euler_radians"
                        },
                        {
                            "source": ".rotate",
                            "target": "degrees_to_radians.degrees"
                        },
                        {
                            "source": "euler_to_quaternion.quaternion",
                            "target": "rotate_by_quaternion.quaternion"
                        },
                        {
                            "source": "rotate_by_quaternion.rotated_vector",
                            "target": "add.first.rotated_vector"
                        },
                        {
                            "source": "add.output",
                            "target": "set_point_position.positions"
                        },
                        {
                            "source": ".translate",
                            "target": "add.first.port"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "rotate_by_quaternion.quaternion",
                            "valueType": "Math::float4",
                            "value": {
                                "x": "0f",
                                "y": "1f",
                                "z": "0f",
                                "w": "1f"
                            }
                        }
                    ],
                    "reservedNodeNames": [
                        {
                            "name": "input"
                        },
                        {
                            "name": "output"
                        }
                    ]
                },
                {
                    "name": "create_simple_knit",
                    "uriImported": "stream:/stream",
                    "metadata": [
                        {
                            "metaName": "io_nodes",
                            "metadata": [
                                {
                                    "metaName": "io_inodes",
                                    "metadata": [
                                        {
                                            "metaName": "input",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "10 97"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "num_strands"
                                                        },
                                                        {
                                                            "metaName": "points_per_strand"
                                                        },
                                                        {
                                                            "metaName": "segments_per_loop"
                                                        },
                                                        {
                                                            "metaName": "rocking"
                                                        },
                                                        {
                                                            "metaName": "scale"
                                                        },
                                                        {
                                                            "metaName": "translate"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "metaName": "io_onodes",
                                    "metadata": [
                                        {
                                            "metaName": "output",
                                            "metadata": [
                                                {
                                                    "metaName": "DisplayMode",
                                                    "metaType": "string",
                                                    "metaValue": "2"
                                                },
                                                {
                                                    "metaName": "LayoutPos",
                                                    "metaType": "string",
                                                    "metaValue": "1784.2 243.975"
                                                },
                                                {
                                                    "metaName": "io_ports",
                                                    "metadata": [
                                                        {
                                                            "metaName": "strands"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "metaName": "ViewportRect",
                            "metaType": "string",
                            "metaValue": "-312.065 -30 2700.13 672"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Strands,construct_strands"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Core::Math,rotate_by_quaternion"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Properties,set_point_position"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,Geometry::Properties,get_point_position"
                        },
                        {
                            "metaName": "_recentNode_",
                            "metaType": "string",
                            "metaValue": "BifrostGraph,MJCG::Geometry::Deformers,wrap_deformer"
                        }
                    ],
                    "ports": [
                        {
                            "portName": "num_strands",
                            "portDirection": "input",
                            "portType": "long"
                        },
                        {
                            "portName": "points_per_strand",
                            "portDirection": "input",
                            "portType": "long"
                        },
                        {
                            "portName": "segments_per_loop",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "rocking",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "scale",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        },
                        {
                            "portName": "translate",
                            "portDirection": "input",
                            "portType": "Math::float3"
                        },
                        {
                            "portName": "strands",
                            "portDirection": "output"
                        }
                    ],
                    "compounds": [
                        {
                            "name": "iterate1",
                            "uriImported": "stream:/stream",
                            "metadata": [
                                {
                                    "metaName": "icon",
                                    "metaType": "string",
                                    "metaValue": "<NATIVE>../icons/LoopIterate.svg"
                                },
                                {
                                    "metaName": "icon",
                                    "metaType": "string",
                                    "metaValue": "<NATIVE>../icons/LoopIterate.svg"
                                },
                                {
                                    "metaName": "icon",
                                    "metaType": "string",
                                    "metaValue": "<NATIVE>../icons/LoopIterate.svg"
                                },
                                {
                                    "metaName": "io_nodes",
                                    "metadata": [
                                        {
                                            "metaName": "io_inodes",
                                            "metadata": [
                                                {
                                                    "metaName": "input",
                                                    "metadata": [
                                                        {
                                                            "metaName": "io_ports",
                                                            "metadata": [
                                                                {
                                                                    "metaName": "max_iterations"
                                                                },
                                                                {
                                                                    "metaName": "current_index"
                                                                },
                                                                {
                                                                    "metaName": "points_per_strand"
                                                                },
                                                                {
                                                                    "metaName": "point_position"
                                                                },
                                                                {
                                                                    "metaName": "segment_offset"
                                                                },
                                                                {
                                                                    "metaName": "step"
                                                                },
                                                                {
                                                                    "metaName": "rocking"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "metaName": "io_onodes",
                                            "metadata": [
                                                {
                                                    "metaName": "output",
                                                    "metadata": [
                                                        {
                                                            "metaName": "io_ports",
                                                            "metadata": [
                                                                {
                                                                    "metaName": "out_point_position"
                                                                },
                                                                {
                                                                    "metaName": "out_segment_offset"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "ports": [
                                {
                                    "portName": "max_iterations",
                                    "portDirection": "input",
                                    "portType": "long",
                                    "portIterationLimit": "true"
                                },
                                {
                                    "portName": "current_index",
                                    "portDirection": "input",
                                    "portType": "long",
                                    "portIterationCounter": "true"
                                },
                                {
                                    "portName": "points_per_strand",
                                    "portDirection": "input",
                                    "portType": "long"
                                },
                                {
                                    "portName": "point_position",
                                    "portDirection": "input"
                                },
                                {
                                    "portName": "segment_offset",
                                    "portDirection": "input"
                                },
                                {
                                    "portName": "step",
                                    "portDirection": "input"
                                },
                                {
                                    "portName": "rocking",
                                    "portDirection": "input"
                                },
                                {
                                    "portName": "out_point_position",
                                    "portDirection": "output"
                                },
                                {
                                    "portName": "out_segment_offset",
                                    "portDirection": "output"
                                }
                            ],
                            "compounds": [
                                {
                                    "name": "for_each",
                                    "uriImported": "stream:/stream",
                                    "metadata": [
                                        {
                                            "metaName": "icon",
                                            "metaType": "string",
                                            "metaValue": "<NATIVE>../icons/LoopForEach.svg"
                                        },
                                        {
                                            "metaName": "icon",
                                            "metaType": "string",
                                            "metaValue": "<NATIVE>../icons/LoopForEach.svg"
                                        },
                                        {
                                            "metaName": "icon",
                                            "metaType": "string",
                                            "metaValue": "<NATIVE>../icons/LoopForEach.svg"
                                        },
                                        {
                                            "metaName": "io_nodes",
                                            "metadata": [
                                                {
                                                    "metaName": "io_inodes",
                                                    "metadata": [
                                                        {
                                                            "metaName": "input",
                                                            "metadata": [
                                                                {
                                                                    "metaName": "io_ports",
                                                                    "metadata": [
                                                                        {
                                                                            "metaName": "t"
                                                                        },
                                                                        {
                                                                            "metaName": "strand_index"
                                                                        },
                                                                        {
                                                                            "metaName": "rocking"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "metaName": "io_onodes",
                                                    "metadata": [
                                                        {
                                                            "metaName": "output",
                                                            "metadata": [
                                                                {
                                                                    "metaName": "io_ports",
                                                                    "metadata": [
                                                                        {
                                                                            "metaName": "positions"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "ports": [
                                        {
                                            "portName": "t",
                                            "portDirection": "input",
                                            "portIterationTarget": "true"
                                        },
                                        {
                                            "portName": "strand_index",
                                            "portDirection": "input"
                                        },
                                        {
                                            "portName": "rocking",
                                            "portDirection": "input"
                                        },
                                        {
                                            "portName": "positions",
                                            "portDirection": "output",
                                            "portIterationTarget": "true"
                                        }
                                    ],
                                    "compoundNodes": [
                                        {
                                            "nodeName": "scalar_to_vector3",
                                            "nodeType": "Core::Conversion::scalar_to_vector3"
                                        },
                                        {
                                            "nodeName": "sin",
                                            "nodeType": "Core::Math::sin"
                                        },
                                        {
                                            "nodeName": "cos",
                                            "nodeType": "Core::Math::cos"
                                        },
                                        {
                                            "nodeName": "neg_one",
                                            "valueType": "float"
                                        },
                                        {
                                            "nodeName": "split_fraction",
                                            "nodeType": "Core::Math::split_fraction"
                                        },
                                        {
                                            "nodeName": "add",
                                            "nodeType": "Core::Math::add",
                                            "multiInPortNames": [
                                                "fraction",
                                                "fraction1",
                                                "output1"
                                            ]
                                        },
                                        {
                                            "nodeName": "multiply",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2",
                                                "output3"
                                            ]
                                        },
                                        {
                                            "nodeName": "pi",
                                            "nodeType": "Core::Constants::pi"
                                        },
                                        {
                                            "nodeName": "three_quarters",
                                            "valueType": "float"
                                        },
                                        {
                                            "nodeName": "two",
                                            "valueType": "float"
                                        },
                                        {
                                            "nodeName": "square_root",
                                            "nodeType": "Core::Math::square_root"
                                        },
                                        {
                                            "nodeName": "multiply1",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "integer"
                                            ]
                                        },
                                        {
                                            "nodeName": "add1",
                                            "nodeType": "Core::Math::add",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2"
                                            ]
                                        },
                                        {
                                            "nodeName": "modulo",
                                            "nodeType": "Core::Math::modulo"
                                        },
                                        {
                                            "nodeName": "to_int",
                                            "nodeType": "Core::Type_Conversion::to_int"
                                        },
                                        {
                                            "nodeName": "multiply2",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2",
                                                "output3"
                                            ]
                                        },
                                        {
                                            "nodeName": "if",
                                            "nodeType": "Core::Logic::if"
                                        },
                                        {
                                            "nodeName": "even",
                                            "nodeType": "Core::Logic::equal"
                                        },
                                        {
                                            "nodeName": "multiply3",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2"
                                            ]
                                        },
                                        {
                                            "nodeName": "add2",
                                            "nodeType": "Core::Math::add",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2",
                                                "output3"
                                            ]
                                        },
                                        {
                                            "nodeName": "multiply4",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2"
                                            ]
                                        },
                                        {
                                            "nodeName": "half",
                                            "valueType": "float"
                                        },
                                        {
                                            "nodeName": "modulo1",
                                            "nodeType": "Core::Math::modulo"
                                        },
                                        {
                                            "nodeName": "even1",
                                            "nodeType": "Core::Logic::equal"
                                        },
                                        {
                                            "nodeName": "if1",
                                            "nodeType": "Core::Logic::if"
                                        },
                                        {
                                            "nodeName": "multiply5",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2",
                                                "rocking"
                                            ]
                                        },
                                        {
                                            "nodeName": "multiply6",
                                            "nodeType": "Core::Math::multiply",
                                            "multiInPortNames": [
                                                "strand_index",
                                                "output1"
                                            ]
                                        },
                                        {
                                            "nodeName": "add3",
                                            "nodeType": "Core::Math::add",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2"
                                            ]
                                        },
                                        {
                                            "nodeName": "to_float",
                                            "nodeType": "Core::Type_Conversion::to_float"
                                        },
                                        {
                                            "nodeName": "divide",
                                            "nodeType": "Core::Math::divide",
                                            "multiInPortNames": [
                                                "output1",
                                                "output2"
                                            ]
                                        }
                                    ],
                                    "connections": [
                                        {
                                            "source": "scalar_to_vector3.vector3",
                                            "target": "divide.first.output1"
                                        },
                                        {
                                            "source": "sin.sine",
                                            "target": "add1.first.output2"
                                        },
                                        {
                                            "source": "cos.cosine",
                                            "target": "multiply3.first.output2"
                                        },
                                        {
                                            "source": "neg_one.output",
                                            "target": "add.first.output1"
                                        },
                                        {
                                            "source": "neg_one.output",
                                            "target": "multiply2.first.output2"
                                        },
                                        {
                                            "source": "split_fraction.fraction",
                                            "target": "add.first.fraction"
                                        },
                                        {
                                            "source": "split_fraction.fraction",
                                            "target": "add.first.fraction1"
                                        },
                                        {
                                            "source": "split_fraction.integer",
                                            "target": "multiply1.first.integer"
                                        },
                                        {
                                            "source": "split_fraction.integer",
                                            "target": "to_int.from"
                                        },
                                        {
                                            "source": "add.output",
                                            "target": "multiply.first.output3"
                                        },
                                        {
                                            "source": "multiply.output",
                                            "target": "sin.value"
                                        },
                                        {
                                            "source": "multiply.output",
                                            "target": "cos.value"
                                        },
                                        {
                                            "source": "pi.pi",
                                            "target": "multiply.first.output2"
                                        },
                                        {
                                            "source": "three_quarters.output",
                                            "target": "multiply.first.output1"
                                        },
                                        {
                                            "source": "two.output",
                                            "target": "square_root.value"
                                        },
                                        {
                                            "source": "square_root.root",
                                            "target": "multiply1.first.output1"
                                        },
                                        {
                                            "source": "square_root.root",
                                            "target": "multiply2.first.output3"
                                        },
                                        {
                                            "source": "square_root.root",
                                            "target": "multiply4.first.output1"
                                        },
                                        {
                                            "source": "square_root.root",
                                            "target": "multiply6.first.output1"
                                        },
                                        {
                                            "source": "square_root.root",
                                            "target": "divide.first.output2"
                                        },
                                        {
                                            "source": "multiply1.output",
                                            "target": "add1.first.output1"
                                        },
                                        {
                                            "source": "add1.output",
                                            "target": "scalar_to_vector3.x"
                                        },
                                        {
                                            "source": "modulo.remainder",
                                            "target": "multiply2.first.output1"
                                        },
                                        {
                                            "source": "modulo.remainder",
                                            "target": "even.first"
                                        },
                                        {
                                            "source": "to_int.int",
                                            "target": "modulo.value"
                                        },
                                        {
                                            "source": "multiply2.output",
                                            "target": "add2.first.output2"
                                        },
                                        {
                                            "source": "if.output",
                                            "target": "multiply3.first.output1"
                                        },
                                        {
                                            "source": "even.output",
                                            "target": "if.condition"
                                        },
                                        {
                                            "source": "multiply3.output",
                                            "target": "add2.first.output1"
                                        },
                                        {
                                            "source": "add2.output",
                                            "target": "multiply5.first.output2"
                                        },
                                        {
                                            "source": "add2.output",
                                            "target": "add3.first.output2"
                                        },
                                        {
                                            "source": "multiply4.output",
                                            "target": "add2.first.output3"
                                        },
                                        {
                                            "source": "half.output",
                                            "target": "multiply4.first.output2"
                                        },
                                        {
                                            "source": "modulo1.remainder",
                                            "target": "even1.first"
                                        },
                                        {
                                            "source": "even1.output",
                                            "target": "if1.condition"
                                        },
                                        {
                                            "source": "if1.output",
                                            "target": "multiply5.first.output1"
                                        },
                                        {
                                            "source": "multiply5.output",
                                            "target": "scalar_to_vector3.y"
                                        },
                                        {
                                            "source": "multiply6.output",
                                            "target": "add3.first.output1"
                                        },
                                        {
                                            "source": "add3.output",
                                            "target": "scalar_to_vector3.z"
                                        },
                                        {
                                            "source": "to_float.float",
                                            "target": "multiply6.first.strand_index"
                                        },
                                        {
                                            "source": "divide.output",
                                            "target": ".positions"
                                        },
                                        {
                                            "source": ".t",
                                            "target": "split_fraction.value"
                                        },
                                        {
                                            "source": ".strand_index",
                                            "target": "modulo1.value"
                                        },
                                        {
                                            "source": ".strand_index",
                                            "target": "to_float.from"
                                        },
                                        {
                                            "source": ".rocking",
                                            "target": "multiply5.first.rocking"
                                        }
                                    ],
                                    "values": [
                                        {
                                            "valueName": "neg_one.value",
                                            "valueType": "float",
                                            "value": "-1f"
                                        },
                                        {
                                            "valueName": "three_quarters.value",
                                            "valueType": "float",
                                            "value": "0.75f"
                                        },
                                        {
                                            "valueName": "two.value",
                                            "valueType": "float",
                                            "value": "2f"
                                        },
                                        {
                                            "valueName": "modulo.divisor",
                                            "valueType": "int",
                                            "value": "2L"
                                        },
                                        {
                                            "valueName": "if.true_case",
                                            "valueType": "float",
                                            "value": "1f"
                                        },
                                        {
                                            "valueName": "if.false_case",
                                            "valueType": "float",
                                            "value": "-1f"
                                        },
                                        {
                                            "valueName": "half.value",
                                            "valueType": "float",
                                            "value": "0.5f"
                                        },
                                        {
                                            "valueName": "modulo1.divisor",
                                            "valueType": "int",
                                            "value": "2L"
                                        },
                                        {
                                            "valueName": "if1.true_case",
                                            "valueType": "float",
                                            "value": "1f"
                                        },
                                        {
                                            "valueName": "if1.false_case",
                                            "valueType": "float",
                                            "value": "-1f"
                                        }
                                    ],
                                    "reservedNodeNames": [
                                        {
                                            "name": "input"
                                        },
                                        {
                                            "name": "output"
                                        }
                                    ],
                                    "forEachCompound": {
                                        "ports": [],
                                        "grainSize": "1"
                                    }
                                }
                            ],
                            "compoundNodes": [
                                {
                                    "nodeName": "to_unsigned_int",
                                    "nodeType": "Core::Type_Conversion::to_unsigned_int"
                                },
                                {
                                    "nodeName": "build_array1",
                                    "nodeType": "Core::Array::build_array",
                                    "multiInPortNames": [
                                        "output1",
                                        "output2"
                                    ]
                                },
                                {
                                    "nodeName": "build_array",
                                    "nodeType": "Core::Array::build_array",
                                    "multiInPortNames": [
                                        "array1",
                                        "converted"
                                    ]
                                },
                                {
                                    "nodeName": "array_size",
                                    "nodeType": "Core::Array::array_size"
                                },
                                {
                                    "nodeName": "for_each",
                                    "nodeType": "for_each"
                                },
                                {
                                    "nodeName": "sequence_array",
                                    "nodeType": "Core::Array::sequence_array"
                                }
                            ],
                            "connections": [
                                {
                                    "source": "to_unsigned_int.unsigned_int",
                                    "target": "build_array.first.converted"
                                },
                                {
                                    "source": "build_array1.array",
                                    "target": "array_size.array"
                                },
                                {
                                    "source": "build_array1.array",
                                    "target": ".out_point_position"
                                },
                                {
                                    "source": "build_array.array",
                                    "target": ".out_segment_offset"
                                },
                                {
                                    "source": "array_size.size",
                                    "target": "to_unsigned_int.from"
                                },
                                {
                                    "source": "for_each.positions",
                                    "target": "build_array1.first.output2"
                                },
                                {
                                    "source": "sequence_array.sequence",
                                    "target": "for_each.t"
                                },
                                {
                                    "source": ".current_index",
                                    "target": "for_each.strand_index"
                                },
                                {
                                    "source": ".points_per_strand",
                                    "target": "sequence_array.size"
                                },
                                {
                                    "source": ".point_position",
                                    "target": "build_array1.first.output1"
                                },
                                {
                                    "source": ".segment_offset",
                                    "target": "build_array.first.array1"
                                },
                                {
                                    "source": ".step",
                                    "target": "sequence_array.step"
                                },
                                {
                                    "source": ".rocking",
                                    "target": "for_each.rocking"
                                }
                            ],
                            "values": [
                                {
                                    "valueName": "for_each.rocking",
                                    "valueType": "float",
                                    "value": "0.100000001f"
                                },
                                {
                                    "valueName": "sequence_array.size",
                                    "valueType": "long",
                                    "value": "99"
                                },
                                {
                                    "valueName": "sequence_array.step",
                                    "valueType": "float",
                                    "value": "0.00999999978f"
                                }
                            ],
                            "reservedNodeNames": [
                                {
                                    "name": "input"
                                },
                                {
                                    "name": "output"
                                }
                            ],
                            "iterateCompound": {
                                "ports": [
                                    {
                                        "portKind": "state",
                                        "inputPortName": "point_position",
                                        "outputPortName": "out_point_position"
                                    },
                                    {
                                        "portKind": "state",
                                        "inputPortName": "segment_offset",
                                        "outputPortName": "out_segment_offset"
                                    }
                                ]
                            }
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "iterate1",
                            "nodeType": "iterate1",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "620 92"
                                }
                            ]
                        },
                        {
                            "nodeName": "build_array1",
                            "nodeType": "Core::Array::build_array",
                            "multiInPortNames": [
                                "output"
                            ],
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "315 207"
                                }
                            ]
                        },
                        {
                            "nodeName": "value",
                            "valueType": "uint",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "10 412"
                                },
                                {
                                    "metaName": "valuenode_defaultvalue",
                                    "metaType": "string",
                                    "metaValue": "0"
                                }
                            ]
                        },
                        {
                            "nodeName": "value2",
                            "valueType": "array<Math::float3>",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "315 12"
                                },
                                {
                                    "metaName": "valuenode_defaultvalue",
                                    "metaType": "string",
                                    "metaValue": "0"
                                },
                                {
                                    "metaName": "valuenode_defaultvalue",
                                    "metaType": "string",
                                    "metaValue": "0"
                                },
                                {
                                    "metaName": "valuenode_defaultvalue",
                                    "metaType": "string",
                                    "metaValue": "0"
                                }
                            ]
                        },
                        {
                            "nodeName": "multiply",
                            "nodeType": "Core::Math::multiply",
                            "multiInPortNames": [
                                "out_point_position",
                                "scale"
                            ],
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "925 10"
                                }
                            ]
                        },
                        {
                            "nodeName": "add",
                            "nodeType": "Core::Math::add",
                            "multiInPortNames": [
                                "output1",
                                "port"
                            ],
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1230 79"
                                }
                            ]
                        },
                        {
                            "nodeName": "one_over",
                            "nodeType": "Core::Math::one_over",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "315 426"
                                }
                            ]
                        },
                        {
                            "nodeName": "construct_strands",
                            "nodeType": "Geometry::Strands::construct_strands",
                            "metadata": [
                                {
                                    "metaName": "DisplayMode",
                                    "metaType": "string",
                                    "metaValue": "2"
                                },
                                {
                                    "metaName": "LayoutPos",
                                    "metaType": "string",
                                    "metaValue": "1504.32 227.924"
                                }
                            ]
                        }
                    ],
                    "connections": [
                        {
                            "source": "iterate1.out_point_position",
                            "target": "multiply.first.out_point_position"
                        },
                        {
                            "source": "build_array1.array",
                            "target": "iterate1.segment_offset"
                        },
                        {
                            "source": "value.output",
                            "target": "build_array1.first.output"
                        },
                        {
                            "source": "value2.output",
                            "target": "iterate1.point_position"
                        },
                        {
                            "source": "multiply.output",
                            "target": "add.first.output1"
                        },
                        {
                            "source": "one_over.inverted",
                            "target": "iterate1.step"
                        },
                        {
                            "source": ".num_strands",
                            "target": "iterate1.max_iterations"
                        },
                        {
                            "source": ".points_per_strand",
                            "target": "iterate1.points_per_strand"
                        },
                        {
                            "source": ".segments_per_loop",
                            "target": "one_over.value"
                        },
                        {
                            "source": ".rocking",
                            "target": "iterate1.rocking"
                        },
                        {
                            "source": ".scale",
                            "target": "multiply.first.scale"
                        },
                        {
                            "source": ".translate",
                            "target": "add.first.port"
                        },
                        {
                            "source": "iterate1.out_segment_offset",
                            "target": "construct_strands.strand_offset"
                        },
                        {
                            "source": "add.output",
                            "target": "construct_strands.point_position"
                        },
                        {
                            "source": "construct_strands.strands",
                            "target": ".strands"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "iterate1.max_iterations",
                            "valueType": "long",
                            "value": "10"
                        },
                        {
                            "valueName": "iterate1.points_per_strand",
                            "valueType": "long",
                            "value": "99"
                        },
                        {
                            "valueName": "iterate1.step",
                            "valueType": "float",
                            "value": "0.100000001f"
                        },
                        {
                            "valueName": "iterate1.rocking",
                            "valueType": "float",
                            "value": "0.100000001f"
                        },
                        {
                            "valueName": "value.value",
                            "valueType": "uint",
                            "value": "0U"
                        },
                        {
                            "valueName": "value2.value",
                            "valueType": "array<Math::float3>",
                            "value": [
                                {
                                    "x": "0f",
                                    "y": "0f",
                                    "z": "0f"
                                }
                            ]
                        }
                    ],
                    "reservedNodeNames": [
                        {
                            "name": "input"
                        },
                        {
                            "name": "output"
                        }
                    ]
                }
            ],
            "compoundNodes": [
                {
                    "nodeName": "color_by_index",
                    "nodeType": "color_by_index",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-2216.59 536.663"
                        }
                    ]
                },
                {
                    "nodeName": "transform_strands",
                    "nodeType": "transform_strands",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1725.28 534.452"
                        }
                    ]
                },
                {
                    "nodeName": "create_simple_knit",
                    "nodeType": "create_simple_knit",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-2466.81 533.34"
                        }
                    ]
                },
                {
                    "nodeName": "uv_wrap_deformer",
                    "nodeType": "MJCG::Geometry::Deformers::uv_wrap_deformer",
                    "fanInPortNames": {
                        "geometries": [
                            "out_strands"
                        ]
                    },
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-904.379 511.713"
                        }
                    ]
                },
                {
                    "nodeName": "set_strands_shape1",
                    "nodeType": "Geometry::Strands::set_strands_shape",
                    "metadata": [
                        {
                            "metaName": "DisplayMode",
                            "metaType": "string",
                            "metaValue": "2"
                        },
                        {
                            "metaName": "LayoutPos",
                            "metaType": "string",
                            "metaValue": "-1967.56 537.672"
                        }
                    ]
                }
            ],
            "connections": [
                {
                    "source": "color_by_index.out_strands",
                    "target": "set_strands_shape1.strands"
                },
                {
                    "source": "create_simple_knit.strands",
                    "target": "color_by_index.strands"
                },
                {
                    "source": "set_strands_shape1.out_strands",
                    "target": "transform_strands.strands"
                },
                {
                    "source": "transform_strands.out_strands",
                    "target": ".out_strands"
                },
                {
                    "source": "transform_strands.out_strands",
                    "target": "uv_wrap_deformer.geometries.out_strands"
                },
                {
                    "source": ".mesh",
                    "target": "uv_wrap_deformer.target_mesh"
                }
            ],
            "values": [
                {
                    "valueName": "color_by_index.start_color",
                    "valueType": "Math::float4",
                    "value": {
                        "x": "1f",
                        "y": "0f",
                        "z": "0f",
                        "w": "1f"
                    }
                },
                {
                    "valueName": "color_by_index.mid_color",
                    "valueType": "Math::float4",
                    "value": {
                        "x": "0f",
                        "y": "1f",
                        "z": "0f",
                        "w": "1f"
                    }
                },
                {
                    "valueName": "color_by_index.end_color",
                    "valueType": "Math::float4",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "1f",
                        "w": "1f"
                    }
                },
                {
                    "valueName": "transform_strands.strands",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "transform_strands.rotate",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "90f",
                        "y": "0f",
                        "z": "90f"
                    }
                },
                {
                    "valueName": "transform_strands.translate",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0.150000006f",
                        "y": "0.300000012f",
                        "z": "0.200000003f"
                    }
                },
                {
                    "valueName": "create_simple_knit.num_strands",
                    "valueType": "long",
                    "value": "145"
                },
                {
                    "valueName": "create_simple_knit.points_per_strand",
                    "valueType": "long",
                    "value": "300"
                },
                {
                    "valueName": "create_simple_knit.segments_per_loop",
                    "valueType": "float",
                    "value": "10f"
                },
                {
                    "valueName": "create_simple_knit.rocking",
                    "valueType": "float",
                    "value": "0.100000001f"
                },
                {
                    "valueName": "create_simple_knit.scale",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0.319999993f",
                        "y": "1f",
                        "z": "0.0700000003f"
                    }
                },
                {
                    "valueName": "create_simple_knit.translate",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "0f",
                        "y": "0f",
                        "z": "0f"
                    }
                },
                {
                    "valueName": "uv_wrap_deformer.scale",
                    "valueType": "Math::float3",
                    "value": {
                        "x": "10f",
                        "y": "10f",
                        "z": "10f"
                    }
                },
                {
                    "valueName": "set_strands_shape1.strands",
                    "valueType": "Amino::Object",
                    "value": {}
                },
                {
                    "valueName": "set_strands_shape1.shape",
                    "valueType": "Geometry::StrandShapes",
                    "value": "Ribbon"
                },
                {
                    "valueName": "set_strands_shape1.screen_aligned",
                    "valueType": "bool",
                    "value": "true"
                },
                {
                    "valueName": "set_strands_shape1.default_size",
                    "valueType": "float",
                    "value": "0.0199999996f"
                }
            ],
            "reservedNodeNames": [
                {
                    "name": "input"
                },
                {
                    "name": "pTorusShape1"
                },
                {
                    "name": "output1"
                }
            ]
        }
    ]
}